1
00:00:01,620 --> 00:00:03,632
NARRATOR: Welcome to Peer to Peer

2
00:00:03,632 --> 00:00:06,700
where you can hone your
skills by watching live coding videos.

3
00:00:08,128 --> 00:00:10,168
Our guest today is Melinda Seckington,

4
00:00:11,190 --> 00:00:16,056
She works as a Ruby developer
at FutureLearn, a social learning platform.

5
00:00:16,990 --> 00:00:19,552
Melinda co-organizes BarCap London,

6
00:00:19,560 --> 00:00:24,030
and participates regularly in
hack days, frequently winning them.

7
00:00:24,632 --> 00:00:26,968
I'm your host, Drew Neil.

8
00:00:26,960 --> 00:00:29,600
And the challenge that I set for Melinda is called...

9
00:00:29,624 --> 00:00:32,180
Building a Mechanical Turk system.

10
00:00:33,992 --> 00:00:37,184
DREW NEIL: So Melinda would you like
to start by reading the challenge.

11
00:00:37,700 --> 00:00:39,368
MELINDA SECKINGTON: Build a Mechanical Turk system.

12
00:00:39,368 --> 00:00:43,696
It should poll people for answers to yes/no
questions that are easily answered by humans 

13
00:00:43,690 --> 00:00:45,288
but not by machines.

14
00:00:45,280 --> 00:00:48,264
If a certain number of people
give the same answer to a question,

15
00:00:48,264 --> 00:00:51,710
it's marked as resolved and
polling for that question ceases.

16
00:00:51,710 --> 00:00:55,536
If people give different answers to
the same question, then polling will continue

17
00:00:55,530 --> 00:00:59,480
until a consensus is reached and
that question can be marked as resolved.

18
00:00:59,500 --> 00:01:04,688
When someone has answered a question, they
may view a summary of all answers to that question,.

19
00:01:05,056 --> 00:01:06,670
DN: There's a little bit
more to the question actually.

20
00:01:06,670 --> 00:01:10,192
If you turn to the next page,
I've provided a sample question.

21
00:01:11,728 --> 00:01:14,032
MS: Is this a cat picture?

22
00:01:14,030 --> 00:01:17,456
DN: So I think most human beings
would have no trouble answering that

23
00:01:17,480 --> 00:01:21,328
Whereas it would be difficult to write
a program to give the right answer there.

24
00:01:21,328 --> 00:01:25,648
With more than 50% certainty.

25
00:01:26,600 --> 00:01:28,736
And there's another question as well.

26
00:01:28,824 --> 00:01:30,824
MS: Is this a squirrel picture?

27
00:01:30,820 --> 00:01:33,344
I think I can say no.

28
00:01:33,760 --> 00:01:34,872
DN: Right.

29
00:01:34,870 --> 00:01:38,504
So that's the kind of question I
thought we could be working with here.

30
00:01:39,440 --> 00:01:47,832
I've provided about 6 animal pictures, so
we can come up with a series of yes/no answers.

31
00:01:48,464 --> 00:01:51,144
Sorry, I mean questions where it's a yes/no answer.

32
00:01:51,344 --> 00:01:53,840
Most of them are going to be nonsense,

33
00:01:53,840 --> 00:01:57,536
but for each picture there
will be one correct answer.

34
00:01:57,536 --> 00:01:59,530
MS: Yes.

35
00:01:59,530 --> 00:02:03,560
DN: So that's what I thought we'd use as
a sample data set for this challenge.

36
00:02:05,400 --> 00:02:10,720
So, I haven't said which technology
you have to use to build this system.

37
00:02:11,080 --> 00:02:13,352
What would be your preference here?

38
00:02:14,008 --> 00:02:20,880
For me it would be Ruby and Rails
because I'm familiar with those already.

39
00:02:21,216 --> 00:02:24,840
Plus we've already got a very simple [inaudible]

40
00:02:24,840 --> 00:02:29,096
and [inaud] system so that people can [inaud]

41
00:02:30,870 --> 00:02:38,152
So, basically if we go to the log in page.

42
00:02:38,248 --> 00:02:42,072
And hit the register button.

43
00:02:42,072 --> 00:02:44,070
[inaudible]

44
00:02:44,070 --> 00:02:48,664
[Silence]

45
00:02:48,660 --> 00:02:49,696
Now we're logged in.

46
00:02:49,690 --> 00:02:51,944
DN: So it looks like a brand new rails app.

47
00:02:51,940 --> 00:02:53,032
MS: Yes.

48
00:02:53,030 --> 00:02:53,872
[They both talk at once]

49
00:02:53,870 --> 00:02:57,920
DN: [inaud] it already has a red
register route and a log in route.

50
00:02:57,920 --> 00:02:59,920
So if we go to log in again...

51
00:03:00,128 --> 00:03:04,904
You will be redirected to the main
page because you're already logged in.

52
00:03:04,900 --> 00:03:07,576
DN: So it can detect that
you're logged in, it remembers you.

53
00:03:07,776 --> 00:03:10,248
And, can you log out as well?

54
00:03:10,240 --> 00:03:13,496
MS: Yes, you just hit log out.

55
00:03:14,512 --> 00:03:18,736
Which you can't really see but you
can hit the log in page and log in again.

56
00:03:18,730 --> 00:03:22,272
So it's very very basic.

57
00:03:22,270 --> 00:03:25,464
DN: [inaud] we don't even have passwords.

58
00:03:25,460 --> 00:03:28,424
No its really basic.

59
00:03:28,420 --> 00:03:32,088
DN: Well that's fine, that's not going to be
an interesting part of this challenge I think.

60
00:03:32,080 --> 00:03:35,304
[New Chapter]

61
00:03:35,576 --> 00:03:42,080
MS: So, where to start.  It's a Mechanical
Turk system so we've got people... users.

62
00:03:43,568 --> 00:03:49,304
And we want to show each
user the questions that we have.

63
00:03:50,680 --> 00:03:56,560
So let's start with looking
at creating these questions.

64
00:03:58,392 --> 00:04:02,080
Each question will have an image.

65
00:04:02,620 --> 00:04:06,288
That's showing us the cat picture.

66
00:04:08,320 --> 00:04:12,272
Text, I guess, like... is this a cat picture

67
00:04:13,336 --> 00:04:15,856
So I guess let's start there.

68
00:04:15,850 --> 00:04:24,312
[Silence]

69
00:04:24,310 --> 00:04:27,056
Let's take the image.

70
00:04:28,600 --> 00:04:32,040
DN: So the string is going to
be a URL from where it listed it.

71
00:04:32,040 --> 00:04:33,280
MS: Yes.

72
00:04:33,280 --> 00:04:35,592
DN: In a public directory probably.

73
00:04:37,220 --> 00:04:43,872
Let's do... description.

74
00:04:45,416 --> 00:04:50,304
And string as well, because we don't want that to be too long.

75
00:04:50,850 --> 00:04:55,912
DN: So the challenge doesn't ask you to create
an admin area where people can create questions,

76
00:04:55,912 --> 00:05:00,360
We're going to pre-populate
the system with some questions?

77
00:05:00,360 --> 00:05:02,072
MS: Yes.

78
00:05:02,070 --> 00:05:04,016
So we want to...

79
00:05:04,010 --> 00:05:07,872
[Silence]

80
00:05:07,870 --> 00:05:12,904
This can be used [inaud] so that we can use db:seed.

81
00:05:13,200 --> 00:05:14,900
So I'll load that in.

82
00:05:16,224 --> 00:05:18,992
So I want to use the seeds [inaud]

83
00:05:18,992 --> 00:05:22,216
[Silence]

84
00:05:22,210 --> 00:05:29,424
DN: So this is just a plain Ruby file. It will
load the environments and then create models.

85
00:05:29,420 --> 00:05:30,016
MS: Yes.

86
00:05:30,010 --> 00:05:33,496
DN: And then you can
execute this file with a rake task.

87
00:05:34,072 --> 00:05:35,632
MS: Yes.

88
00:05:37,400 --> 00:05:40,104
Let me just set up our questions.

89
00:05:43,528 --> 00:05:48,384
So very simply we want to do question.create.

90
00:05:48,380 --> 00:05:55,952
[Silence]

91
00:05:55,960 --> 00:05:57,736
[Inaudible]

92
00:05:57,736 --> 00:06:01,816
[Silence]

93
00:06:01,810 --> 00:06:09,904
So we have, what did we say
before... image and... description.

94
00:06:09,904 --> 00:06:15,528
That would be the very very simple way of [inaud] it.

95
00:06:15,520 --> 00:06:18,832
But we want to do something
a little bit smarter I think.

96
00:06:22,136 --> 00:06:24,632
[inaud] the image is somewhere.

97
00:06:24,630 --> 00:06:30,008
DN: Yes, I gave them to you with your challenge,
but I don't think they're in your rails app yet.

98
00:06:30,000 --> 00:06:32,416
MS: No they're not.

99
00:06:33,488 --> 00:06:38,528
DN: When I first created these
images, I named them dog.jpeg, cat.jpeg

100
00:06:38,520 --> 00:06:43,280
And then I realised that was a little
opinionated so I changed it to 'Animal 1', 'Animal 2'...

101
00:06:43,280 --> 00:06:47,104
[Melinda thinks]

102
00:06:47,100 --> 00:06:49,704
MS: Yes, let's just throw them in the public.

103
00:06:51,552 --> 00:06:56,360
They'll maybe come up in a lesser place later

104
00:06:56,360 --> 00:07:04,408
[Silence]

105
00:07:04,400 --> 00:07:07,016
How do you loop through numbers again... times.

106
00:07:07,010 --> 00:07:12,920
[Silence]

107
00:07:12,976 --> 00:07:14,920
I'll double check the [inaud]

108
00:07:14,920 --> 00:07:18,272
It would be Ruby times rather than...

109
00:07:18,270 --> 00:07:26,272
[Silence]

110
00:07:26,270 --> 00:07:30,208
DN: That's a great way of finding
documentation, is that something to do with Alfred.

111
00:07:30,200 --> 00:07:32,160
MS: Yes so...

112
00:07:32,160 --> 00:07:35,752
DN: So you've got it searching rails documentation.

113
00:07:35,750 --> 00:07:40,728
MS: Yes, it's a work flow that's called Dev Doctor.

114
00:07:40,720 --> 00:07:46,696
And it's not just for rails, it's for most
programming language that you can think of.

115
00:07:47,088 --> 00:07:48,216
DN: Oh that's good.

116
00:07:48,210 --> 00:07:50,576
MS: Yes, it's really handy.

117
00:07:52,120 --> 00:07:54,408
Yes I was right.

118
00:07:54,400 --> 00:07:57,488
I have to question myself sometimes.

119
00:07:57,480 --> 00:08:19,256
[Silence]

120
00:08:19,250 --> 00:08:20,976
DN: Oh that's...

121
00:08:21,072 --> 00:08:25,056
MS: Yes, sublime, like soup, try to open

122
00:08:25,568 --> 00:08:28,752
DN: [inaud]


1
00:00:00,960 --> 00:00:02,777
NARRATOR: Welcome to Peer to Peer

2
00:00:02,777 --> 00:00:06,770
where you can hone your skills
by watching live coding videos.

3
00:00:06,891 --> 00:00:09,245
Our guest today is Sam Phippen

4
00:00:09,240 --> 00:00:12,228
Who's a swashbuckling hacker from London, UK.

5
00:00:12,880 --> 00:00:16,754
He fixes every size of data problem and inaud plausible solutions.

6
00:00:17,771 --> 00:00:22,240
He helps fight the forces of justice
as a member of RSpec core team.

7
00:00:22,514 --> 00:00:25,280
And he's sad that he can't hug every cat.

8
00:00:26,114 --> 00:00:28,400
Our host is Camille Baldock.

9
00:00:28,400 --> 00:00:31,017
And the challenge that she's set for Sam is called

10
00:00:31,010 --> 00:00:34,228
Building a Spy library.

11
00:00:34,440 --> 00:00:36,880
CAMILLE BALLDOCK; So Sam, do you
want to start by reading the challenge?

12
00:00:36,880 --> 00:00:37,851
SAM PHIPPEN: Sure.

13
00:00:38,811 --> 00:00:42,640
Write a simple library to enable testing with spies.

14
00:00:42,811 --> 00:00:46,628
Here's a simple Ruby app
which interacts with a RESTful API.

15
00:00:46,750 --> 00:00:52,308
The app has a passing test suite, but the tests
are an incomplete specification of its behaviour.

16
00:00:52,340 --> 00:00:56,525
Add a set of isolated tests that
spy on collaborations between objects

17
00:00:56,520 --> 00:00:58,205
to complete the test suite.

18
00:00:58,380 --> 00:01:00,548
Chapter 01

19
00:01:02,662 --> 00:01:07,588
CB: Right! So do you want to have a
quick look at what this Ruby app is and does.

20
00:01:07,640 --> 00:01:10,388
And we can have a play with that
before we actually dive into the challenge.

21
00:01:10,422 --> 00:01:13,020
SP: Sure... so...

22
00:01:13,020 --> 00:01:19,017
It looks like we've got a gem file and
a jem file.block lib and test directory.

23
00:01:19,280 --> 00:01:26,377
So I guess the first thing we should do
is check that all the tests are passing.

24
00:01:26,982 --> 00:01:31,554
The project has a test helper,
so we'll run that... it should run

25
00:01:33,291 --> 00:01:35,645
We have tests and they're passing so...

26
00:01:35,640 --> 00:01:39,771
I'm going to start by looking at what the tests do.

27
00:01:40,457 --> 00:01:42,765
Seems like a reasonable place to begin.

28
00:01:42,880 --> 00:01:49,908
So we've got a sort of standard mini test inaud and we're requiring a file called Counter Client,

29
00:01:49,900 --> 00:01:55,222
which is presumably the RESTful
client the challenge mentions.

30
00:01:55,220 --> 00:01:59,885
And we can see here that
we've got our counter client test class,

31
00:01:59,908 --> 00:02:05,920
Which inherits from Vtest test
and it has a set up phase, but

32
00:02:05,920 --> 00:02:09,394
it doesn't look like it has any actual tests in it.

33
00:02:09,390 --> 00:02:16,880
Instead it's just used to do the set up, and then
this child class integrated counter client test

34
00:02:16,880 --> 00:02:20,274
is the one that's actually running the tests.

35
00:02:20,270 --> 00:02:29,268
And that does it's own minor piece of set up
providing I guess, the integrated collaborator.

36
00:02:31,405 --> 00:02:35,782
CB: Inaud using HDP for the client right?

37
00:02:35,780 --> 00:02:42,297
SP: Yes so whatever this LHTTP thing is
erm... that's presumably making the real

38
00:02:42,290 --> 00:02:46,365
HTTP requests giving our integrated test.

39
00:02:46,380 --> 00:02:51,668
And then we have our test
for the degenerate case erm...

40
00:02:51,660 --> 00:02:58,274
... so that uninitialized key has a count
of zero and then 1 and a random number.

41
00:02:59,714 --> 00:03:01,988
These test seem like they are pretty good,

42
00:03:02,045 --> 00:03:05,177
covering for the behaviour of the actual object.

43
00:03:07,805 --> 00:03:11,805
CB: Yes, let's have a look at what the
object does, we can only see a couple of methods

44
00:03:12,011 --> 00:03:15,302
SP: Sure so...

45
00:03:15,474 --> 00:03:21,154
... counter client object can
be initialized with an HTTP,

46
00:03:21,150 --> 00:03:29,874
it has a get method which delegates onto the HTTP
and an increment method which does the same.

47
00:03:29,870 --> 00:03:33,885
So that gives us the API that we're dealing with here.

48
00:03:33,880 --> 00:03:39,474
And it's worth noting that there's a small
fix we can make here before we move on.

49
00:03:40,068 --> 00:03:45,160
At the top of the file here we're
acquiring LHTTP but it looks like it's actually...

50
00:03:45,160 --> 00:03:46,434
CB: We're not actually using it anywhere here.

51
00:03:46,430 --> 00:03:52,960
SP: Sure, but it's being dependency injected so
I guess sometime in the past this file needed that.

52
00:03:53,040 --> 00:03:55,782
CB: Alright and it's going to inaud to get that out.

53
00:03:55,780 --> 00:03:59,954
SP: We should be able to play
that away and still pass all the tests.

54
00:03:59,950 --> 00:04:02,937
[Sam thinks]

55
00:04:06,920 --> 00:04:12,960
And the reason we're failing is that
it's not being required in the test,

56
00:04:12,994 --> 00:04:18,770
which is where it should be
being required, so let's also fix that.

57
00:04:21,805 --> 00:04:26,765
And I've put the require at the
top there but it can go either way.

58
00:04:26,760 --> 00:04:29,634
Great, so we've past all of our tests.

59
00:04:30,120 --> 00:04:32,811
Back to green... that's nice. 

60
00:04:32,857 --> 00:04:39,782
So we've made a more change without having
to think too hard about anything in particular.

61
00:04:39,780 --> 00:04:48,377
So, the challenge adequately
describes the problem with these tests.

62
00:04:49,360 --> 00:04:58,520
There's no actual evidence here of any real collaborations between the inaud HTTP and the counter client.

63
00:04:58,960 --> 00:05:06,445
If you look in these tests, no actual
interactions occur with LHTTP and the test itself.

64
00:05:06,600 --> 00:05:10,960
It's assumed therefore that the client is
delegating that, and we know that's the case,

65
00:05:10,971 --> 00:05:15,794
but it would be nice to have
evidence in test as well as evidence in code.

66
00:05:15,790 --> 00:05:20,834
CB: Right so when we look at that test, we have
no confidence that there is a HTTP thing going on,

67
00:05:20,830 --> 00:05:24,011
and someone might have just put a hash and memory....

68
00:05:24,010 --> 00:05:29,622
SP: Right, exactly, so I think it would
be a good idea to add some isolated tests

69
00:05:29,620 --> 00:05:35,062
which use the the fact that the
counter client is already dependency injection

70
00:05:35,060 --> 00:05:42,400
to specify the contract effectively between
the object, which will be an isolated test.

71
00:05:42,400 --> 00:05:48,125
CB: So here we don't care about that it's
using HTTP, all we care about is that our HTTP thing

72
00:05:48,120 --> 00:05:50,228
that we've dependency
injected in our counter client,

73
00:05:50,262 --> 00:05:53,634
is going to be called in lots
of different ways and do the work.

74
00:05:53,630 --> 00:05:55,817
Not just something else, right?

75
00:05:55,810 --> 00:06:05,588
SP: Yes, effectively the counter client and
doing HTTP are at different levels of construction.

76
00:06:06,788 --> 00:06:09,600
The specific languages here are different.

77
00:06:09,600 --> 00:06:13,645
The counter client has methods that
are talking in terms of our domain rate,


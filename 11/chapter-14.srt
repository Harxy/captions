1
00:00:00,000 --> 00:00:04,000
Chapter 14.
Using FakeMake to build the sample project.

2
00:00:04,331 --> 00:00:06,091
TS: So where does that get us to?

3
00:00:06,114 --> 00:00:11,977
JC: Well if we go back to the
original example that we were given, 

4
00:00:11,970 --> 00:00:20,617
I was hacking around with the script trying to
decide what the user interface to this should be. 

5
00:00:21,977 --> 00:00:27,280
So this will now be lib/fakemake.

6
00:00:27,668 --> 00:00:32,571
[Silence]

7
00:00:32,570 --> 00:00:39,577
Now... With the target... there's two source files. 

8
00:00:39,570 --> 00:00:43,188
I will need the target for both of those. 

9
00:00:43,180 --> 00:00:46,982
These are in the namespace now. 

10
00:00:47,120 --> 00:00:54,617
[Silence]

11
00:00:55,000 --> 00:00:59,554
Was it complimenter? TS: Yes.

12
00:00:59,725 --> 00:01:07,325
[Silence]

13
00:01:07,600 --> 00:01:11,714
JC: OK, so those are two targets with
no dependencies and no build instructions.

14
00:01:11,760 --> 00:01:22,971
They have hello JavaScript. Which is
derived from hello.coffee and you build that. 

15
00:01:23,370 --> 00:01:28,011
We could make a target for the lib directory,
not sure if I'll go through extracting that. 

16
00:01:28,020 --> 00:01:30,491
Or maybe I will... Yes.

17
00:01:30,490 --> 00:01:32,994
Lib is erh.......

18
00:01:34,240 --> 00:01:38,982
Actually, directories do have mtimes.

19
00:01:40,605 --> 00:01:49,885
Yes, target new example lib;
which has no dependencies. 

20
00:01:49,942 --> 00:01:56,994
And is built by calling make dir  p example lib.

21
00:01:58,210 --> 00:02:01,085
Which means you can remove that. 

22
00:02:05,428 --> 00:02:09,931
Which means that goes that way.

23
00:02:11,360 --> 00:02:15,188
Let's clone that rather than... 

24
00:02:15,440 --> 00:02:21,440
[Silence]

25
00:02:21,680 --> 00:02:26,217
So complementor.js depends on that.

26
00:02:26,262 --> 00:02:30,930
Let's do that one and then...

27
00:02:31,490 --> 00:02:38,994
So complimenter.js depends on
complimenter.coffee. That all looks OK. 

28
00:02:39,490 --> 00:02:49,005
And bundle.js depends on two JavaScript files and
you build it by calling that and then you build it. 

29
00:02:49,108 --> 00:02:52,411
OK so...

30
00:02:54,480 --> 00:02:57,980
This was in scratch test rb. 

31
00:03:00,182 --> 00:03:08,765
As always, let's remove
everything that we had before. 

32
00:03:09,074 --> 00:03:12,068
The tree just has the source code in it.

33
00:03:12,148 --> 00:03:15,668
If we run ruby scratch test.

34
00:03:15,965 --> 00:03:20,034
Uninitialized constant target.
Oh, I didn't namespace everything did I?

35
00:03:20,148 --> 00:03:31,760
[Silence]

36
00:03:32,457 --> 00:03:36,777
It's run everything. And
we've got everything in there.

37
00:03:36,811 --> 00:03:44,068
And example bundle contains
the code that we wanted. 

38
00:03:44,060 --> 00:03:50,194
If we run it again, because we've
made it lazy enough, it should happen. 

39
00:03:50,262 --> 00:03:54,228
And indeed nothing happens. 

40
00:03:54,228 --> 00:03:56,220
Because we've made it this recursive structure. If anything does need rebuilding it should rebuild it but not rebuild everything. So if i use touch, which sets the mtime on a file to now, and creates it if it's not there. If I touch example lib hello.js. Or rather, let's touch hello coffee. Sorry.
TS: So this is simulating you having edited it?
JC: Yes. So if I touch that. Hello.js is now up to date. The compliment.js isn't. So I should run the coffee compiler once and then run uglify. Because the whole bundle is out of date as well because you changed the source file. So it should recompile what needs to be recompiled but only those files.
TS: Ok.
JC: And we see there that it has run coffee once on hello.coffee. but not on complimenter.
TS: Right.
JC: So that seems to be doing what we want. I'm just going to check because I haven't revisited this file in a while. It is the changes we made that made it do this.
If I delete this line, then it should become unlazy. It should do all the work every time.
It does, you can see it churning away there. I'll reinstate that line, and it becomes lazy again.
TS: Excellent.
JC: So that seems to do what we want.
TS: That's great. Well congratulations on getting it working, that's really good. That seems like a good place for us to stop. Thanks very much, I've really enjoyed this.
JC: Me too, thanks Tom.



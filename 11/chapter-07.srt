1
00:00:00,000 --> 00:00:03,977
Chapter 07
Specifying dependencies.

2
00:00:04,365 --> 00:00:08,580
JC: OK so we just committed the working target class.

3
00:00:09,600 --> 00:00:12,411
It can't do an awful lot just
yet, it can just run the commands.

4
00:00:12,410 --> 00:00:16,251
So if we go back to...

5
00:00:17,817 --> 00:00:21,257
What did we have in here. My test file.

6
00:00:21,250 --> 00:00:28,925
When I was sketching this out earlier,
down here I told each of the targets to build.

7
00:00:28,948 --> 00:00:32,102
They're all just isolated.

8
00:00:32,228 --> 00:00:37,165
A better user interface would be to do that.

9
00:00:37,668 --> 00:00:44,982
And have everything needed to
produce the final result just happen.

10
00:00:46,080 --> 00:00:52,960
For that sort of thing you're going to need to
know for example, what bundle.js will depend on.

11
00:00:54,670 --> 00:00:58,251
Hello_js and complimenter_js

12
00:00:58,250 --> 00:01:05,222
Whereas these won't depend on anything.

13
00:01:06,560 --> 00:01:10,700
They are their own things.

14
00:01:10,845 --> 00:01:15,885
Although they do arguably depend on their source code.

15
00:01:19,508 --> 00:01:24,742
In order for the build system to be lazy
and work out if any more work needs doing, 

16
00:01:24,754 --> 00:01:27,542
it will need to know about that relationship.

17
00:01:27,540 --> 00:01:32,651
So it's probably advisable if we say... 

18
00:01:32,660 --> 00:01:35,702
Here we have these target
objects to represent these things.

19
00:01:35,725 --> 00:01:43,005
but for these source files,
we could say that they are...

20
00:01:44,130 --> 00:01:56,400
For example, hello coffee is a
target new example source hello.coffee, 

21
00:01:56,457 --> 00:02:01,634
which actually depends on nothing because the
source code you wrote is not derived from anything.

22
00:02:01,725 --> 00:02:08,011
And it has no build instructions and
because you wrote it it doesn't need generating. 

23
00:02:08,902 --> 00:02:13,131
And then this could take that as a dependency.

24
00:02:13,325 --> 00:02:17,920
And you can do the same for
complimenter, and what have you.

25
00:02:19,737 --> 00:02:27,188
I'm on the fence about whether to pass
these things around as values or by name. 

26
00:02:27,280 --> 00:02:36,914
Because, to pass this by saying
`example/src/hello.coffee`...

27
00:02:38,834 --> 00:02:43,348
TS: What's the trade off there?
Why would you want to do it one way or the other?

28
00:02:45,542 --> 00:02:51,965
JC: Good question, if you do them by
name you can do your target in any order. 

29
00:02:52,434 --> 00:02:58,000
This can be beneficial. This is
supposed to be a declarative system. 

30
00:02:58,708 --> 00:03:03,234
It can also mean that you make
dependencies on things that don't exist yet. 

31
00:03:03,325 --> 00:03:11,142
So for example complimentor.js
won't exist when you start the build. 

32
00:03:11,140 --> 00:03:17,280
The target represents something that will exist
in the future so you don't need the file to exist.

33
00:03:17,340 --> 00:03:25,611
But having the pass by name means that you
can do something for example, by having patterns. 

34
00:03:25,645 --> 00:03:30,514
Like if you want to say star.js
depends on star.coffee, 

35
00:03:30,510 --> 00:03:36,605
we don't want to have to write all these
targets out by hand once the project gets large. 

36
00:03:36,651 --> 00:03:42,902
So you may want to have some general
rule for how you get from one to the other.

37
00:03:43,668 --> 00:03:47,840
TS: It sounds like that may
be more complicated though.

38
00:03:49,520 --> 00:03:55,897
JC: Yeah, erh... We can
probably start by passing by value 

39
00:03:56,457 --> 00:03:59,554
and if it becomes a problem we can pass by name,

40
00:03:59,550 --> 00:04:04,902
and then have those names be looked up
in something else but turned into the values.

41
00:04:04,925 --> 00:04:08,240
That should be a fairly minor change to make later.

42
00:04:08,308 --> 00:04:12,068
So let's do the pass by value thing.

43
00:04:12,868 --> 00:04:20,217
So if we go back to our spec.

44
00:04:20,240 --> 00:04:24,857
I already had this open
because it was in another shell.

45
00:04:26,868 --> 00:04:33,040
Yes, so... This is all talking
about running instructions. 

46
00:04:34,994 --> 00:04:37,142
We also want to talk about having dependencies.

47
00:04:37,165 --> 00:04:44,605
So we've decided that the target is going to
have a new argument, which is its dependencies. 

48
00:04:45,051 --> 00:04:48,091
[Silence]

49
00:05:07,005 --> 00:05:11,120
That ought to run but it doesn't... Why not?

50
00:05:11,394 --> 00:05:14,754
[James is thinking]

51
00:05:15,770 --> 00:05:22,617
Oh yes, OK so the tests we need...

52
00:05:25,154 --> 00:05:31,440
I need to write that properly...
Dependencies is some list.

53
00:05:34,182 --> 00:05:37,200
And I like things that line up.

54
00:05:37,554 --> 00:05:40,491
So that ought to be fine.

55
00:05:43,245 --> 00:05:50,057
So these tests are now testing
a thing that has no dependencies.

56
00:05:52,720 --> 00:06:00,300
Ultimately we would like to have
a target that will depend on something else, 

57
00:06:01,302 --> 00:06:06,182
and if you build your target it
will also build the other thing.

58
00:06:09,474 --> 00:06:14,525
Maybe this is where we get
into integration tests scenario.

59
00:06:14,731 --> 00:06:20,365
Because I'm going to have two target
objects maybe writing unit tests against those.

60
00:06:20,434 --> 00:06:24,982
I could write a test to say when you call
build on this call build on this other thing, 

61
00:06:26,091 --> 00:06:29,280
but maybe that's specifying
implementation too much.

62
00:06:29,794 --> 00:06:35,085
So I'm going to try and write... 

63
00:06:38,628 --> 00:06:43,600
Spec/features is where I'm
going to put my generation test. 

64
00:06:43,668 --> 00:06:50,697
Dependent targets spec.rb.

65
00:06:51,657 --> 00:06:54,651
[Silence]

66
00:06:59,451 --> 00:07:03,074
No that's not how you write specs is it?

67
00:07:03,977 --> 00:07:10,628
Describe dependent targets do.

68
00:07:11,268 --> 00:07:14,434
[James thinks]

69
00:07:17,428 --> 00:07:26,628
Say when one target depends on another.

70
00:07:29,440 --> 00:07:38,571
As something simple, I'm going to say that if you have...

71
00:07:38,742 --> 00:07:42,731
what's something simple we can
do with files, just like catting them.

72
00:07:42,810 --> 00:07:49,188
So if you have file c that is...

73
00:07:49,840 --> 00:07:53,474
I'll write it in code, that might be a bit clearer.

74
00:07:53,600 --> 00:07:56,194
So if we say...

75
00:07:59,142 --> 00:08:05,165
Not quite sure how to phrase this yet but... 

76
00:08:05,188 --> 00:08:08,182
let's say that we have...

77
00:08:08,434 --> 00:08:18,480
There exists a file called a.text that
just contains an a with a new line in it.

78
00:08:20,160 --> 00:08:30,148
And likewise there are some files called
b and c that have their letters in them.

79
00:08:30,422 --> 00:08:33,714
[Silence]

80
00:08:34,982 --> 00:08:45,325
So if there are those files,
then you have your first target.

81
00:08:47,520 --> 00:08:57,748
And let's add these somewhere... Like in spec temp.

82
00:08:58,160 --> 00:09:01,211
[Silence}

83
00:09:04,742 --> 00:09:12,674
So if the first target is spec temp 1.text.

84
00:09:14,994 --> 00:09:21,165
And that's new with that.

85
00:09:21,782 --> 00:09:29,405
And it has no dependencies, or rather
it does have dependencies which are...

86
00:09:32,750 --> 00:09:34,685
Sorry I got a bit side tracked. 

87
00:09:34,742 --> 00:09:39,234
So file_a.

88
00:09:39,462 --> 00:09:44,137
TS: So we need targets to represent these files
even though there not going to be built in any way.

89
00:09:47,154 --> 00:09:49,817
There will be some nicer user
interface around this at some point.

90
00:09:49,810 --> 00:09:53,200
But it makes this a bit more
complicated as far as those values, 

91
00:09:53,234 --> 00:09:56,960
because you have to make values
for thing that are just primitive files.

92
00:09:56,960 --> 00:09:59,714
TS: Whereas if you identified things by name,

93
00:09:59,710 --> 00:10:04,434
the assumption would have been if I've named
something by name it isn't a target it's just a file.

94
00:10:04,460 --> 00:10:05,748
JC: Yes. 

95
00:10:05,780 --> 00:10:17,177
So these have no dependencies in them,
no build instructions, so they can be done like that.

96
00:10:19,508 --> 00:10:21,714
That's b that's c.

97
00:10:21,817 --> 00:10:29,131
So if this depends on file a and file b, 

98
00:10:29,680 --> 00:10:51,142
And works by catting spec temp a.text
spec temp b.text into spec temp 1.text.

99
00:10:55,154 --> 00:11:07,451
And the second target is called second.

100
00:11:09,770 --> 00:11:21,405
And that works by depending
on the first target - file c. 

101
00:11:23,080 --> 00:11:32,640
Then that is going to work by taking 1.text
and c.text and putting that into the second. 

102
00:11:32,731 --> 00:11:38,148
I suppose this could be our before block.

103
00:11:38,377 --> 00:11:41,794
[Silence]

104
00:11:50,651 --> 00:11:52,697
TS: So you haven't actually built anything yet?

105
00:11:52,690 --> 00:11:55,131
JC: No.

106
00:11:55,131 --> 00:11:57,130
If we just build the second target – as he writes – because everything has been concatenated together.
I'm going to  make some helper functions here, so if I use this file helper here, I just need to define that.
Ive made this helper because I want everything to be cleaned up automatically afterwards. This helper is going to make the file with that content and keep track of it so if there's inaud remove all of them.
TS: OK.


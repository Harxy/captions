1
00:00:00,000 --> 00:00:02,900
Chapter 7: Using a different
clap sample for each player.

2
00:00:02,900 --> 00:00:08,330
SP: I have another sample somewhere, like here.

3
00:00:08,330 --> 00:00:12,320
You can see the difference.

4
00:00:12,390 --> 00:00:14,910
This one which doesn't want to play again.

5
00:00:14,920 --> 00:00:16,360
DN: Yeah, they sound completely different!

6
00:00:16,360 --> 00:00:21,420
SP: They are different.  Maybe not the
best, but you want them to sound different. 

7
00:00:21,540 --> 00:00:26,020
So we just paste it in here, so we have two.

8
00:00:38,160 --> 00:00:46,650
We want to load two and we want to
make sure both have loaded before we continue.

9
00:00:46,650 --> 00:00:51,810
So here we enter the horrors
of synchronicity in JavaScript. 

10
00:00:51,840 --> 00:01:00,110
They created this thing called promises, so
you can enter sync without having zero callbacks.

11
00:01:00,170 --> 00:01:08,540
If we didn't use promises we have to load the first
sample and then the second, and it's not very elegant.

12
00:01:08,560 --> 00:01:13,160
So we are going to turn this into
a generic thing for loading the samples.

13
00:01:13,160 --> 00:01:16,630
Giving them the URL and
then instead of just loading the thing, 

14
00:01:16,670 --> 00:01:20,650
we will make it give us a promise,
and then we will use the Promise.all() method. 

15
00:01:20,670 --> 00:01:26,710
That waits for everything to be loaded. So
it's a bit less hard-coded and a bit more generic.

16
00:01:26,760 --> 00:01:32,160
So I'm going to change this
comment to "Loading samples generally". 

17
00:01:33,560 --> 00:01:36,760
So it will return a promise.
I will do this step by step.

18
00:01:36,760 --> 00:01:46,740
So I can give a URL, and take
out the hard codedness of that.

19
00:01:46,760 --> 00:01:52,530
So instead of opening clap zero
wave, I'm going to load the URL 

20
00:01:52,570 --> 00:01:58,190
And instead of just returning
this... I'll do it step by step. 

21
00:01:58,230 --> 00:02:02,900
And also we don't want this thing here either.

22
00:02:02,930 --> 00:02:07,580
So if we load this sample, I want
it to have some call back or something,

23
00:02:07,620 --> 00:02:09,840
so it can tell you this thing is done. 

24
00:02:09,880 --> 00:02:15,520
But I want to convert this into a
promise because it should be faster.

25
00:02:15,520 --> 00:02:19,150
So I'm going to return a promise. 

26
00:02:20,970 --> 00:02:25,830
You tell the person there's a promise.
At some point something might happen. 

27
00:02:25,830 --> 00:02:31,130
The promise happens or it is
rejected, which is when something fails.

28
00:02:31,170 --> 00:02:38,290
When you have a promise you can use
the then() method to say when you fulfill this, 

29
00:02:38,310 --> 00:02:41,200
promise me this thing then do it. 

30
00:02:41,240 --> 00:02:45,620
It's like the connect() method
but instead of for (web audio) nodes. 

31
00:02:45,640 --> 00:02:48,290
It's for things that might happen in the future.

32
00:02:48,360 --> 00:02:51,250
You can connect as many
things as you want to the promise. 

33
00:02:51,310 --> 00:02:56,700
You can connect a number of events.
Inaud, or you could load more things.

34
00:02:56,710 --> 00:03:00,700
For example you might want to load something
sequentially, instead of all at the same time.

35
00:03:00,710 --> 00:03:04,240
But in this case we just do promise all.

36
00:03:04,260 --> 00:03:08,900
I don't know how it schedules
things and I don't really care. 

37
00:03:08,920 --> 00:03:10,450
I just care about the things being done. 

38
00:03:10,480 --> 00:03:14,020
If you care about the order of execution
you might want to use a different library.

39
00:03:14,020 --> 00:03:18,290
In this case I don't, so I will just make this thing. 

40
00:03:18,310 --> 00:03:25,910
The way you use promises is you wrap the
code that you want to execute with a function

41
00:03:25,910 --> 00:03:28,880
that has two things, 'OK' and 'fail'.

42
00:03:28,900 --> 00:03:33,860
I think this is not the correct method names,
but I like this thing because it's pretty obvious.

43
00:03:33,890 --> 00:03:37,600
This is the 'OK' callback or the 'fail' callback.

44
00:03:37,740 --> 00:03:43,420
So if you return this thing...

45
00:03:44,470 --> 00:03:51,240
In this case, instead of triggering the
whole process of everything I'm going to...

46
00:03:51,240 --> 00:03:55,520
(I'm not familiar with this keyboard)

47
00:03:56,390 --> 00:04:04,060
When I'm loading I'm going
to call the OK with a response. 

48
00:04:04,240 --> 00:04:06,540
(I will need to decode the thing, but anyway...)

49
00:04:06,550 --> 00:04:14,450
I will use this thing or use fail instead
of this. So I do need to use the decode thingy.

50
00:04:14,450 --> 00:04:19,970
It can be just 'load sample', because I just
want to get a sample out of here at the end.

51
00:04:20,010 --> 00:04:26,270
However you create it, or decode it,
I just want you to load and give me a sample.

52
00:04:26,360 --> 00:04:34,420
So I'm going to make it inaud and then here.

53
00:04:34,490 --> 00:04:39,010
There is a promised version of the inaud
ordinator but it doesn't work in Chrome yet.

54
00:04:39,010 --> 00:04:41,010
DN: I see.
SP: So it's pretty much the same. This is a good case so I'm going to respond. I'm going to call fill the promise, decode buffer. And if there is an error, fail.  That's why I like the OK and fail because it's fairly obvious. Not like an error callback..it's too long.  Get on with it. I think with the promise version you can just return ok with the result of this. Inaud in chrome, I don't want to do this. I want to keep it simple and this should be simple enough.
So if I call this function I'm just going to get a promise, and it doesn't actually do anything.
I'm going to show you so I'm going to try to load clap_07.wav
So if I do this...  the promise is pending.
DN: Ah yes.
SP: So nothing's happening. But if I say Promise.all() with an array of promises. In this case just one. Or maybe not. Let's not go that far. If I say sample promise then hopefully it will give me a sample.
Ta Ta !
So I could do this thing, or I could... This is not Ruby... So I need to have parenthesis. [laughter].
We have some spaces.  So here I should have samples. So it will make all the promises happen somehow. I don't care how I just want it to be done and then give me the samples in another array. I should have another buffer which is the inaud as before. I could generate this but I don't think it's worth starting something. I'm just going to be very lazy again.
DN: Sounds fine.


1
00:00:00,000 --> 00:00:03,856
Chapter 2: Playing a clap sample.

2
00:00:03,850 --> 00:00:06,112
SP: So this is just an empty
directory: there's nothing here.

3
00:00:06,128 --> 00:00:13,248
I'll start by creating a HTML file,
so we can start doing things.

4
00:00:13,240 --> 00:00:16,144
And I'll just use Vim. [Laughter]

5
00:00:16,140 --> 00:00:22,912
I've configured that the way I like. People
don't like the colors, but I like them.

6
00:00:22,910 --> 00:00:27,320
The reason the comments are so bright is
because they are like little labels.

7
00:00:27,350 --> 00:00:31,510
Everyone is like: "What kind of colors is that?"

8
00:00:31,550 --> 00:00:36,208
<head> and [Silence as Sole types]

9
00:00:36,200 --> 00:00:40,400
So this is just standard html tags.

10
00:00:40,400 --> 00:00:44,688
[Silence]

11
00:00:44,680 --> 00:00:50,880
I think I learned this trick from you:
how to swap lines.

12
00:00:50,880 --> 00:00:52,880
DN: Should that be "utf-8", rather
than "8-"?

13
00:00:52,880 --> 00:00:59,376
No, this is me typing quickly.
I think you can use both.

14
00:00:59,370 --> 00:01:02,816
I think the parser knows what to do.

15
00:01:02,848 --> 00:01:10,448
Right now I don't need to have anything
but I suppose I'll put something in the body.

16
00:01:10,440 --> 00:01:16,512
Close everything. This is a plugin that I
installed to close tags.

17
00:01:16,590 --> 00:01:28,416
So if I open this thing – there's nothing here,
just this thing, nothings happening either.

18
00:01:28,656 --> 00:01:32,784
I think what we should start
with is just playing the clap.

19
00:01:32,780 --> 00:01:39,520
You can see how I start
assembling the whole quagmire.

20
00:01:39,520 --> 00:01:41,744
So back to this thing.

21
00:01:41,760 --> 00:01:48,880
I need something that loads, or does
the thing, so I'm going to load a script which...

22
00:01:48,940 --> 00:01:55,040
This is not the best place to
put it but I will start with this.

23
00:01:55,248 --> 00:02:00,080
And obviously we need to write the file.

24
00:02:01,960 --> 00:02:09,840
I like to be at least a little correct. So
I'll add a listener here.

25
00:02:09,904 --> 00:02:15,488
So the code at least waits for loading.

26
00:02:17,210 --> 00:02:20,760
This should start when the whole thing has loaded.

27
00:02:20,760 --> 00:02:24,060
Which shouldn't be too complex
because there isn't much to load.

28
00:02:24,112 --> 00:02:28,240
But it's good to start with a
good habit from the beginning.

29
00:02:28,240 --> 00:02:31,184
And then load the script afterwards.

30
00:02:31,216 --> 00:02:36,528
When you use Web Audio you
have to start by creating a context.

31
00:02:36,570 --> 00:02:41,885
It's a black box where things happen; a mini universe.

32
00:02:41,920 --> 00:02:46,080
You can create a new AudioContext like this.

33
00:02:46,140 --> 00:02:51,248
One of those details: Safari doesn't
know how to do things without prefixes.

34
00:02:51,280 --> 00:02:57,792
If you want to do this in Safari
you have to say: WebKitAudioContext.

35
00:02:57,800 --> 00:03:09,984
People start doing things like:
AudioContext || WebkitAudioContext

36
00:03:10,016 --> 00:03:11,152
This is pretty messy.

37
00:03:11,200 --> 00:03:14,720
There is a polyfill you can install
and it will bring all the variations,

38
00:03:14,760 --> 00:03:19,376
and it also patches some methods
Safari has, that are the old style.

39
00:03:19,370 --> 00:03:21,200
Because they haven't updated everything.

40
00:03:21,200 --> 00:03:24,530
But, I don't like to tamper with
those things when I'm doing a new project.

41
00:03:24,550 --> 00:03:28,670
So I just try to do everything and then if
I really need to make this thing work with Safari,

42
00:03:28,680 --> 00:03:33,830
then I will add the polyfill and make sure that all
the patches work with the new style of code,

43
00:03:33,840 --> 00:03:37,540
but for this example we can just leave it like this.

44
00:03:37,570 --> 00:03:40,020
So we have this and it doesn't do anything at all.

45
00:03:40,020 --> 00:03:45,870
And just to make sure that it
works, I just log simple things.

46
00:03:45,940 --> 00:03:52,310
So I'll reload and it's showing me I have
an AudioContext, and its got a sampleRate.

47
00:03:52,420 --> 00:04:00,270
And there's nothing happening.
We have this thing but there is nothing to see.

48
00:04:00,270 --> 00:04:03,050
DN: I see, so this is a
dedicated inspector for Web Audio?

49
00:04:03,060 --> 00:04:10,370
SP: Yes, but if you don't connect anything
to the context, nothing is going to be shown.

50
00:04:10,380 --> 00:04:12,870
It's waiting for something
to happen – it's very lazy.

51
00:04:12,880 --> 00:04:16,500
It doesn't waste resources,
trying to inspect things.

52
00:04:16,520 --> 00:04:25,570
So, the way this works is you have nodes,
and you connect those nodes to the destination.

53
00:04:25,720 --> 00:04:37,750
It creates a graph of sounds that go in a cascade
to the context destination, which is the speakers.

54
00:04:37,780 --> 00:04:44,430
So if I want to make some clap sounds
on this computer I need to load the sound,

55
00:04:44,430 --> 00:04:48,590
and then create a node that can
play that kind of thing and then trigger it.

56
00:04:48,590 --> 00:04:54,280
Also it has to be connected to the destination
so it can sound, so this is like several parts.

57
00:04:54,280 --> 00:04:58,260
So I will try and start by loading the file.

58
00:04:58,260 --> 00:04:59,630
DN: So it will be like a sample.

59
00:04:59,660 --> 00:05:01,560
SP: Yes, I'm going to load a sample.

60
00:05:01,560 --> 00:05:09,310
I grew up making music with trackers, so samples
are natural to me, but maybe not for everyone?

61
00:05:09,360 --> 00:05:16,600
So I'm never sure if I should
call it a sound file or sample or what.

62
00:05:17,550 --> 00:05:21,210
So yes, I'm going to try to load the sample.

63
00:05:21,210 --> 00:05:26,340
And then we decode it because when you
load the sample it's just like binary data.

64
00:05:26,360 --> 00:05:29,600
Web Audio doesn't know what to
do with that so you need to decode it.

65
00:05:29,622 --> 00:05:33,280
There is a function it provides to
decode it, and then we will play it.

66
00:05:33,290 --> 00:05:38,100
So I'm going to try to do this thing
first. Then we will do the sequences.

67
00:05:38,160 --> 00:05:47,010
So for loading this we use this
famous cross request thingy.

68
00:05:47,040 --> 00:05:56,860
There is a new thing called fetch; I can't remember
the syntax of that so I'll open my cheat thingy,

69
00:05:56,860 --> 00:06:02,270
which is this loadSample.js thing.

70
00:06:02,300 --> 00:06:09,234
This is important, you want
to create a new XMLHttpRequest

71
00:06:09,268 --> 00:06:12,114
with a responseType of arraybuffer.

72
00:06:12,150 --> 00:06:18,400
And then you want to listen for when the
thing has loaded, but I just want to go step by step.

73
00:06:18,400 --> 00:06:22,850
I can do this thing, I just need a reminder. [laughter]

74
00:06:26,310 --> 00:06:31,450
It's awkward because it has XML uppercase
but only the first letter of Http is uppercase.

75
00:06:31,470 --> 00:06:33,560
HTTP should be all uppercase, but it's not.

76
00:06:33,560 --> 00:06:35,980
DN: HTTP is an abbreviation as well, isn't it?

77
00:06:35,980 --> 00:06:41,550
SP: Exactly, it should be XMLHTTPRequest
but its not, so it's super awkward.

78
00:06:41,550 --> 00:06:43,108
DN: That's even harder to read!To my eyes.

79
00:06:43,108 --> 00:06:50,780
SP: Yes whatever, they are changing that with fetch.

80
00:06:50,810 --> 00:06:57,660
You need to say this is an arraybuffer because
otherwise the browser tries to parse what it loads.

81
00:06:57,660 --> 00:07:02,030
Maybe if it's JSON or something. You don't
want it to touch the thing before it's ready.

82
00:07:02,050 --> 00:07:05,540
You just want an arraybuffer.

83
00:07:05,740 --> 00:07:11,350
And then you add an EventListener,
so when the thing is ready it will tell you.

84
00:07:11,350 --> 00:07:14,070
I could probably just complete...

85
00:07:18,760 --> 00:07:21,920
Again, more console logging [Laughter]

86
00:07:23,770 --> 00:07:29,410
[Sole thinks]

87
00:07:29,430 --> 00:07:32,180
OK this is how you open the thing.

88
00:07:32,190 --> 00:07:38,610
The URL let's say it's "CLAP07".
I think that's the name of the file.

89
00:07:41,270 --> 00:07:46,740
And then we just say send(). And I have
to make sure the clap file is in the right place.

90
00:07:46,740 --> 00:07:48,190
DN: Yes.

91
00:07:50,280 --> 00:07:54,480
Almost there, it's "CLAP_07". Let's place this in here.

92
00:07:54,480 --> 00:07:56,960
So it's CLAP_...

93
00:07:56,960 --> 00:07:59,520
[Silence]

94
00:08:00,370 --> 00:08:05,870
And that should load the thing.
It should say something here... Hi!

95
00:08:05,870 --> 00:08:06,880
DN: Ah, OK.

96
00:08:06,880 --> 00:08:13,180
So when it's loaded, in this context, "this" is the request,

97
00:08:13,180 --> 00:08:22,210
so if I say this.data; it should be the request
data, I think. No. Maybe it will be the this.response?

98
00:08:22,320 --> 00:08:29,850
I should make a library so I don't have to
remember these things. I always have to copy this.

99
00:08:29,890 --> 00:08:31,100
DN: Ah, there we go.

100
00:08:31,100 --> 00:08:37,110
SP: In the context of the listener, "this" is a
request, so "this.response" is the data that we loaded.

101
00:08:37,140 --> 00:08:39,990
It's just an array buffer,
it's not being parsed or anything.

102
00:08:40,030 --> 00:08:46,580
So here's my 14K of data,
that I know what to do with.

103
00:08:46,600 --> 00:08:51,420
So what you do with this is, using
the context that you created before:

104
00:08:51,420 --> 00:08:59,570
You decode the audio data. So I say
please decode this thing I just got.

105
00:08:59,610 --> 00:09:05,980
And when you're ready...
So it's got two callbacks.

106
00:09:06,010 --> 00:09:10,420
That means it converts the binary data
into something the browser can play, hopefully.

107
00:09:10,440 --> 00:09:15,300
It should be able to play because this
is a WAV file. Also, I have tried it before. [Laughter]

108
00:09:15,350 --> 00:09:23,120
But if you don't know for sure that it's going to
work you should also have a fail callback.

109
00:09:23,140 --> 00:09:27,520
This should tell you when you can't
decode the thing. So it's a good practice.

110
00:09:27,570 --> 00:09:29,830
DN: Yeah, right.

111
00:09:29,830 --> 00:09:33,840
SP: This is terrible I cannot decode it.

112
00:09:33,880 --> 00:09:39,110
And then log the error. Something like that,
so at least you can see something is happening.

113
00:09:39,110 --> 00:09:42,920
So supposing that we get that thing,..

114
00:09:42,920 --> 00:09:48,630
decodedBuffer should print the thing.

115
00:09:48,630 --> 00:09:59,100
It's called that and it's decoded the thing.
It makes sense that the length is 7 bytes,

116
00:09:59,120 --> 00:10:03,770
because this is the byteLength...
I think it's like CD size or something.

117
00:10:03,780 --> 00:10:09,560
It's not exact because you have the header
of the wave file as well, so it's not just
raw binary data.

118
00:10:09,590 --> 00:10:13,620
You have the header, and that describes:
This is a wave file, it's got one channel la la la la.

119
00:10:13,660 --> 00:10:17,950
So this is what the decodeAudioData function does.

120
00:10:17,950 --> 00:10:24,330
It reads a header and tries to find what type
of file it is; it could be an Ogg file or an MP3.

121
00:10:24,330 --> 00:10:28,330
That depends on the browser.

122
00:10:28,340 --> 00:10:29,520
DN: This one's a WAV.

123
00:10:29,520 --> 00:10:31,350
SP: Yes, this should be easy to play.

124
00:10:31,370 --> 00:10:36,880
For a while they would just play
on Firefox and not on Chrome or Safari,

125
00:10:36,880 --> 00:10:39,350
but right now with WAV things are pretty easy.

126
00:10:39,380 --> 00:10:40,190
DN: OK right.

127
00:10:40,190 --> 00:10:45,040
SP: This is not the best option because
they are big.

128
00:10:45,050 --> 00:10:47,180
But for this demonstration they are OK.

129
00:10:47,720 --> 00:10:49,770
DN: The duration is less than a second I think.

130
00:10:49,800 --> 00:10:59,660
SP: Yes, its pretty small, 0.16 seconds.
So I could actually play that.

131
00:11:02,240 --> 00:11:03,440
DN: It's over before it's started!

132
00:11:03,450 --> 00:11:06,830
SP: Yes, we just want to make something play.

133
00:11:06,860 --> 00:11:13,060
So we have this thing decoded, and instead of
console logging we can maybe play the thing.

134
00:11:13,060 --> 00:11:22,670
So I'm going to say playSample, no playBuffer.
I like to call things by their proper name.

135
00:11:22,780 --> 00:11:28,210
And I'll make the function
somewhere else. Decode is happening here.

136
00:11:30,930 --> 00:11:31,920
DN: In a callback.

137
00:11:31,940 --> 00:11:35,730
SP: Yes, happens in a callback. [Laughter]

138
00:11:35,730 --> 00:11:38,870
This is terrible, we should change it,
but these are the steps that we wanted to do,

139
00:11:38,900 --> 00:11:45,880
so for playing we just create
playBuffer and give it a buffer parameter.

140
00:11:45,910 --> 00:11:53,510
As I say, you need to create a node,
so this thing we have here is a buffer.

141
00:11:53,530 --> 00:11:59,940
BufferNode is what we need to play buffers.
So this is slightly confusing [Laughter].

142
00:11:59,950 --> 00:12:09,870
So using the context that we
created before, we create a bufferNode.

143
00:12:09,910 --> 00:12:15,470
And then you say bufferNode.connect.

144
00:12:15,500 --> 00:12:17,200
This is for establishing the graph.

145
00:12:17,240 --> 00:12:24,400
So you connect that to the destination.
All the nodes have the connect method.

146
00:12:24,400 --> 00:12:28,410
And you can connect them to other
nodes or to a destination, in this case.

147
00:12:28,430 --> 00:12:35,020
So I'll start with connecting it here and
later we will use a good idea before we continue.

148
00:12:35,040 --> 00:12:42,420
But basically we say connect and say the buffer
that we want to play, and it's the buffer that we've got.

149
00:12:42,450 --> 00:12:45,320
Because you can play several
samples with the same BufferNode.

150
00:12:45,330 --> 00:12:50,540
You can change the buffer property
and get different things with the same...

151
00:12:50,540 --> 00:12:52,240
Without changing the graph or anything.

152
00:12:52,260 --> 00:12:53,710
DN: Yes, OK.

153
00:12:53,710 --> 00:12:56,430
SP: And then you just say start().

154
00:12:56,450 --> 00:13:01,650
With the parameters: could use undefined or
zero, which means: "as soon as possible".

155
00:13:01,660 --> 00:13:02,690
DN: Yeah, right.

156
00:13:02,700 --> 00:13:06,020
So in theory that should...

157
00:13:06,030 --> 00:13:10,980
Oh no, maybe it's just Buffer.
I'm always confused with this.

158
00:13:11,010 --> 00:13:15,200
Is it Buffer... No.

159
00:13:15,220 --> 00:13:20,880
OK, this is where I check the API because I
can never remember the names of the methods.

160
00:13:22,500 --> 00:13:25,560
DN: You went straight to the source, the W3C.

161
00:13:25,570 --> 00:13:30,310
SP: Yes. Ah, BufferSource.

162
00:13:30,320 --> 00:13:32,320
Is it Source? Yes.

163
00:13:32,330 --> 00:13:38,140
Yes, they are doing the same thing,
this is the same all the time.

164
00:13:38,150 --> 00:13:40,430
OK so I can move this thing.

165
00:13:40,450 --> 00:13:43,640
DN: This is basically the "hello world" of Web Audio?

166
00:13:43,640 --> 00:13:49,570
SP: It could be. OK yes, we have a clap, finally.


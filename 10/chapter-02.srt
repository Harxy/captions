1
00:00:00,000 --> 00:00:03,856
[Chapter 2: Playing a clap sample]

2
00:00:03,850 --> 00:00:06,112
SP: So this is just an empty
directory: there's nothing here.

3
00:00:06,128 --> 00:00:13,248
I'll start by creating an HTML file,
so we can start doing things.

4
00:00:13,240 --> 00:00:16,144
And I'll just use Vim. [Laughter]

5
00:00:16,140 --> 00:00:22,912
And I can configure that the way I like.
I don't like decorum when I make things.

6
00:00:22,910 --> 00:00:31,552
So the reason I comment something like inaud is because inaud the labels. Everyone says what kind of course is that why inaud.

7
00:00:31,550 --> 00:00:36,208
<head> and [Silence as Sole types]

8
00:00:36,200 --> 00:00:40,400
So this is just inaud.

9
00:00:40,400 --> 00:00:44,688
[Silence]

10
00:00:44,680 --> 00:00:50,880
I think I learned this trick from you, how to solve inaud.

11
00:00:50,880 --> 00:00:52,880
DN: Is that utf-8?

12
00:00:52,880 --> 00:00:59,376
No, this is me typing quickly. I think you can use both.

13
00:00:59,370 --> 00:01:02,816
inaud the parser knows.

14
00:01:02,848 --> 00:01:10,448
Right now I don't need to have anything
but I suppose I should put something for it.

15
00:01:10,440 --> 00:01:16,512
Close everything. Inaud.

16
00:01:16,590 --> 00:01:28,416
So if I open this thing – there's nothing here,
just this thing, nothings happening either.

17
00:01:28,656 --> 00:01:32,784
To start with it's just the plain clap.

18
00:01:32,780 --> 00:01:39,520
You can see how I start assembling the whole inaud.

19
00:01:39,520 --> 00:01:41,744
So back to this thing.

20
00:01:41,760 --> 00:01:48,880
I need something that loads, or does
the thing, so I'm going to load a script which...

21
00:01:48,940 --> 00:01:55,040
This is not the best place to
put it but I will start with this.

22
00:01:55,248 --> 00:02:00,080
And obviously we need to write the file.

23
00:02:01,960 --> 00:02:09,840
I like to be at least, a little correct. inaud here

24
00:02:09,904 --> 00:02:15,488
So the code at least waits for loading.

25
00:02:17,210 --> 00:02:20,688
This should start when the whole thing has loaded.

26
00:02:20,720 --> 00:02:24,064
Which shouldn't be too
complex because there isn't much at all.

27
00:02:24,112 --> 00:02:28,240
But it's good to start with a
good habit from the beginning.

28
00:02:28,240 --> 00:02:31,184
And then have the screens afterwards

29
00:02:31,216 --> 00:02:36,528
When you want a web audio you
have to start by creating a context.

30
00:02:36,576 --> 00:02:46,112
A black box thing or mini universe,
so you can create a new AudioContext like this.

31
00:02:46,140 --> 00:02:51,248
Inaud because Safari doesn't
know how to do things without prefixes.

32
00:02:51,280 --> 00:02:57,792
If you want to do this in Safari
you have to say look at all the context.

33
00:02:57,800 --> 00:03:09,984
People start doing things like:
AudioContext || WebkitAudioContext

34
00:03:10,016 --> 00:03:11,152
This is pretty messy.

35
00:03:11,200 --> 00:03:14,720
There is a polyfill you can install
and it will bring all the variations,

36
00:03:14,760 --> 00:03:19,376
and it also patches some methods
safari has, that are the old style.

37
00:03:19,370 --> 00:03:21,200
Because they haven't updated everything.

38
00:03:21,200 --> 00:03:24,530
But, I don't like to tamper with
those things when I'm doing a new project.

39
00:03:24,550 --> 00:03:28,670
So I just try to do everything and then if
I really need to make this thing work with safari,

40
00:03:28,680 --> 00:03:33,830
then I will add the polyfill and make sure that all
the patches work with the new style of code,

41
00:03:33,840 --> 00:03:37,540
but for this example we can just leave it like this.

42
00:03:37,570 --> 00:03:40,020
So we have this and it doesn't do anything at all.

43
00:03:40,020 --> 00:03:45,870
And just to make sure that it
works, I just log simple things.

44
00:03:45,940 --> 00:03:52,310
So below that it is showing me I have another
context, and its got sample rate and inaud

45
00:03:52,420 --> 00:04:00,270
And there's nothing happening.
We have this thing but there is nothing to see.

46
00:04:00,270 --> 00:04:03,050
DN: I see, so this is a dedicated inspector for the...

47
00:04:03,060 --> 00:04:10,370
SP: Yes, and if you don't do anything, you don't
give it the context. Nothing is going to be shown. 

48
00:04:10,380 --> 00:04:12,870
We are waiting for something
to happen – it's very lazy. 

49
00:04:12,880 --> 00:04:16,500
It doesn't waste resources, trying to spec things. 

50
00:04:16,520 --> 00:04:25,570
 So, the way this works is you have nodes,
and you connect those nodes to the destination.

51
00:04:25,720 --> 00:04:37,750
It creates a graph of sounds that go in a cascade
to the context destination, which is the speakers.

52
00:04:37,780 --> 00:04:44,430
So if I want to make some clap sounds
on this computer I need to load the sound, 

53
00:04:44,430 --> 00:04:48,590
and then create a node that can
play the things.... And then trigger the thing.

54
00:04:48,590 --> 00:04:54,280
Also it has to be connected to the destination
so it can sound, so this is like inaud

55
00:04:54,280 --> 00:04:58,260
So I will try and start by loading the file.

56
00:04:58,260 --> 00:04:59,630
DN: So there will be a sample.

57
00:04:59,660 --> 00:05:01,560
SP: Yes, I'm going to load a sample.

58
00:05:01,560 --> 00:05:09,310
I grew up with trackers and things, so samples aren't
natural to me, I don't think it's natural for everyone. 

59
00:05:09,360 --> 00:05:16,600
So I'm never sure if I should
call it a sound file or sample or what.

60
00:05:17,550 --> 00:05:21,210
So yes, I'm going to try to load the sample. 

61
00:05:21,210 --> 00:05:26,340
And then we decode it because when you 
now the sample it's just like binary data.

62
00:05:26,360 --> 00:05:28,880
but web audio doesn't know what to do with that.

63
00:05:28,900 --> 00:05:33,280
There is inaud function to
call it and then we will play it. 

64
00:05:33,290 --> 00:05:38,100
So I'm going to try to do this thing first.
Then we will do the sequences things.

65
00:05:38,160 --> 00:05:47,010
So for loading this we use this
famous cross request thingy.

66
00:05:47,040 --> 00:05:56,860
There is a thing called fetch; I can't remember
the syntax of that so I'll open my cheat thingy,

67
00:05:56,860 --> 00:06:02,270
which is the load sample thing.

68
00:06:02,300 --> 00:06:12,150
This is important, you want to create a new
XMLHttpRequest with a responseType of arraybuffer. 

69
00:06:12,150 --> 00:06:18,400
And then you want to listen once the thing has
loaded, but I just want to go step by step. 

70
00:06:18,400 --> 00:06:22,850
I can do this thing, I just need a reminder. [laughter]

71
00:06:26,310 --> 00:06:31,450
It's super open because its got
XMLH uppercase and the rest lower case.

72
00:06:31,490 --> 00:06:33,560
It should be all uppercase, but it's not.

73
00:06:33,560 --> 00:06:35,980
DN: HTTP is an abbreviation as well, isn't it?

74
00:06:35,980 --> 00:06:41,550
SP: Exactly, it should be httprequest
but its not so it's supre supre open.

75
00:06:41,550 --> 00:06:42,620
DN: That's even harder to read

76
00:06:42,620 --> 00:06:50,780
SP: Yes, whatever, they are changing that with inaud.

77
00:06:50,810 --> 00:06:57,660
You need to say this is an arraybuffer because
otherwise the browser tries to parse what it loads.

78
00:06:57,660 --> 00:07:02,030
as though it's JSON or something. It doesn't
want you to touch the thing before its inaud

79
00:07:02,050 --> 00:07:05,540
You just want that arraybuffer.

80
00:07:05,740 --> 00:07:11,350
And then you add an EventListener,
so when the thing is ready it will tell you.

81
00:07:11,350 --> 00:07:14,070
I could probably just complete...

82
00:07:18,760 --> 00:07:21,920
Again, more console login [Laughter]

83
00:07:23,770 --> 00:07:29,410
[Sole thinks]

84
00:07:29,430 --> 00:07:32,180
OK this is how you open the thing. 

85
00:07:32,190 --> 00:07:38,610
The URL let's say is CLAP07 

86
00:07:41,270 --> 00:07:46,740
And then just say send and I have
to make sure clap is in the right place. 

87
00:07:46,740 --> 00:07:48,190
DN: Yes.

88
00:07:50,280 --> 00:07:54,480
So this is clap 07 inaud this thing here.

89
00:07:54,480 --> 00:07:56,960
So it's clap underscore. 

90
00:07:56,960 --> 00:07:59,520
[Silence]

91
00:08:00,370 --> 00:08:05,870
And that should load the thing.
It should say something here... Hi!

92
00:08:05,870 --> 00:08:06,880
DN: Ah, OK.

93
00:08:06,880 --> 00:08:13,180
So when it's loaded, in this context, this is a request,

94
00:08:13,180 --> 00:08:22,210
so if I say "this data"; it should request
data, I think. No.  Maybe it will be response.  

95
00:08:22,320 --> 00:08:29,850
I should make a library so I don't have to
remember these things. I always have to copy this.

96
00:08:29,890 --> 00:08:31,100
DN: Ah, there we go.

97
00:08:31,100 --> 00:08:37,110
SP: In the context for the listener, this is a request,
of a request of a response of the data that we loaded. 

98
00:08:37,140 --> 00:08:39,990
It's just an array buffer,
it's not being parsed or anything.  

99
00:08:40,030 --> 00:08:46,580
So here's my 14K of data,
that I know what to do with.

100
00:08:46,600 --> 00:08:51,420
So what you do with this is use it
in the context that you created before. 

101
00:08:51,420 --> 00:08:59,570
You decode the audio data. So I say
please decode this thing I just call up.

102
00:08:59,610 --> 00:09:05,980
And when you're ready...
So it's got two call backs. 

103
00:09:06,010 --> 00:09:10,420
That means it converts the binary data
into something the browser can play, hopefully.

104
00:09:10,440 --> 00:09:15,300
It should be able to play because this
is an 8.5. Also, I have tried it before. [Laughter]

105
00:09:15,350 --> 00:09:23,120
But if you don't know for sure that it's going to
work you should also have a failed thingy. 

106
00:09:23,140 --> 00:09:27,520
This should tell you when you can't
decode the thing. So it's a good practice.

107
00:09:27,570 --> 00:09:29,830
DN: Yeah, right.

108
00:09:29,830 --> 00:09:33,840
SP: This is terrible code.

109
00:09:33,880 --> 00:09:39,110
And then log the error. Something like that,
so at least you can see something is happening. 

110
00:09:39,110 --> 00:09:42,920
So supposing that we get that thing,.. 

111
00:09:42,920 --> 00:09:48,630
Decoded buffer should print the thing. 

112
00:09:48,630 --> 00:09:59,100
It's called that and it's called the thing.
It makes sense that the inaud is happening because inaud.

113
00:09:59,120 --> 00:10:03,770
I think it's like CD size or something.
 DN: Yeah... Sample rate.

114
00:10:03,780 --> 00:10:09,560
SP: It's not exact because you have the header as well.
And the wave file, so it's not just raw binary data. 

115
00:10:09,590 --> 00:10:13,620
You have the header, and that describes
the wave file and It's got one channel la la la la.

116
00:10:13,660 --> 00:10:17,950
So this is what you call the
decode data fraction does. 

117
00:10:17,950 --> 00:10:24,330
First it needs to work out the type of
file this is; it could be an old inaud file on mp3.

118
00:10:24,330 --> 00:10:28,330
That depends on the browser. 

119
00:10:28,340 --> 00:10:29,520
DN: This one's a .wav


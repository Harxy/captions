1
00:00:00,000 --> 00:00:02,970
Chapter 12: Accenting the first beat.

2
00:00:03,390 --> 00:00:05,790
DN: I suppose another thing
to make it sound more musical,

3
00:00:05,810 --> 00:00:11,390
maybe the first beat could always be slightly
louder. And that would give you a bit of orientation.

4
00:00:11,420 --> 00:00:12,610
SP: Could be,

5
00:00:12,670 --> 00:00:14,560
DN: That wasn't in the original spec.

6
00:00:14,560 --> 00:00:17,780
SP: Yes, we could maybe look at that later.

7
00:00:17,830 --> 00:00:27,930
SP: So if we're at the beginning of the rep we want some to be louder and the rest quieter.

8
00:00:27,950 --> 00:00:30,670
DN: Yes, or just normal.

9
00:00:30,670 --> 00:00:38,630
SP: We want it to be current step zero.

10
00:00:38,710 --> 00:00:43,520
And it doesn't matter if it's the first
or the second player, it's for both of them.

11
00:00:43,550 --> 00:00:45,500
DN: I think it will be just for the first player.

12
00:00:45,500 --> 00:00:51,450
SP: OK so we just look at current step.

13
00:00:51,520 --> 00:00:58,210
The way web audio works is,
every node does a single thing.

14
00:00:58,210 --> 00:01:03,380
The buffer node doesn't have a volume parameter,

15
00:01:03,380 --> 00:01:09,290
so we need to create a node that only
modifies the volume of whatever goes through it.

16
00:01:09,290 --> 00:01:13,420
It's called 'gain', so you can adjust the gain.

17
00:01:13,450 --> 00:01:16,090
DN: I see.

18
00:01:16,170 --> 00:01:20,340
SP: So here we create a buffer each time.

19
00:01:20,390 --> 00:01:27,030
So I'm going to introduce the gain node
in between the buffer node and the limiter,

20
00:01:27,040 --> 00:01:33,410
and set the volume as well, so it's
a bit contrived, but it should be OK.

21
00:01:33,450 --> 00:01:37,240
So I will call it gain.

22
00:01:37,240 --> 00:01:40,430
[Silence]

23
00:01:43,420 --> 00:01:47,310
I can never remember if it's
createGain() or createGainNode().

24
00:01:47,330 --> 00:01:49,520
If it doesn't work, we'll fix that.

25
00:01:49,570 --> 00:01:53,670
So I will connect buffer node to the gain.

26
00:01:55,310 --> 00:02:02,550
This has to be the gain value.
And then the gain to the limiter.

27
00:02:05,290 --> 00:02:08,560
I also need to set the gain value.

28
00:02:09,080 --> 00:02:14,560
The amount of gain that we want, and it's got gain.

29
00:02:15,710 --> 00:02:21,650
It's gainValue, I will explain why.

30
00:02:23,800 --> 00:02:28,690
Let's make sure that this works, to start with.

31
00:02:28,690 --> 00:02:31,930
[Silence]

32
00:02:31,950 --> 00:02:41,520
Let's suppose this is the
gainValue... For the first player.

33
00:02:41,550 --> 00:02:46,560
Let's suppose it's always
zero so that it keeps playing.

34
00:02:47,210 --> 00:02:55,510
We don't want to change the second
one so I'm going to make it inaud value.

35
00:02:55,560 --> 00:03:02,590
Classic JavaScript.

36
00:03:02,770 --> 00:03:05,740
If it's not undefined

37
00:03:05,740 --> 00:03:11,960
You don't want to just use gainValue because if
it's zero it's going to assume that it's one.

38
00:03:12,070 --> 00:03:17,420
So if it's not undefined just
use gainValue, otherwise use 1.0.

39
00:03:17,520 --> 00:03:21,540
So we don't change anything at all.

40
00:03:23,290 --> 00:03:26,540
Question mark.

41
00:03:26,780 --> 00:03:30,610
So in theory, this should...

42
00:03:30,640 --> 00:03:31,380
[They listen]

43
00:03:31,380 --> 00:03:35,240
And we should see new nodes here.

44
00:03:35,240 --> 00:03:38,130
Inaud so here's the thing.

45
00:03:40,050 --> 00:03:43,620
At some point it should disappear,
but it hasn't for some reason.

46
00:03:44,100 --> 00:03:47,400
DN: Interesting! Have we
introduced a memory leak here?

47
00:03:47,400 --> 00:03:53,240
SP: Yes! I think that's the way I'm connecting things.

48
00:03:53,600 --> 00:03:55,240
Hmm interesting.

49
00:03:55,240 --> 00:03:59,980
So now were just playing the buffers,
just not connecting them to the limiter.

50
00:03:59,990 --> 00:04:03,100
And this is definitely growing... Look at that.

51
00:04:03,180 --> 00:04:06,330
OK I need to close this
before it hogs down everything.

52
00:04:06,330 --> 00:04:10,500
Let me think about how to do this.

53
00:04:10,500 --> 00:04:15,440
Will they just get removed?
Or create a disaster here?

54
00:04:15,590 --> 00:04:21,000
So maybe I should tell it which gain
to connect. Maybe we should have 2 base...

55
00:04:21,000 --> 00:04:26,390
So we don't create all the gain nodes all the time. Maybe this is a bad idea.

56
00:04:27,020 --> 00:04:33,330
Like having two roads... Or, just
tell it which gain to connect to,

57
00:04:33,410 --> 00:04:37,870
so I don't do this massive amount of gains.

58
00:04:37,870 --> 00:04:39,870
Let me think how I would do this.

59
00:04:41,030 --> 00:04:45,320
Just as I have two samples
I could have two gain nodes.

60
00:04:48,150 --> 00:04:54,525
Usually what you do is use the gain nodes as routers.

61
00:04:54,651 --> 00:04:55,360
DN: Right

62
00:04:55,394 --> 00:05:00,171
SP: They aren't actually modifying
anything but you can connect things to them.

63
00:05:00,182 --> 00:05:01,554
DN: Yeah, OK.

64
00:05:01,580 --> 00:05:05,280
SP: Eventually they will be garbage
collected when you're done with them,

65
00:05:05,302 --> 00:05:07,874
but you don't need to create the gain every time.

66
00:05:07,940 --> 00:05:14,822
Web audio can't get rid of those gain nodes because
it doesn't know if you want to use them afterwards.

67
00:05:14,880 --> 00:05:19,188
The buffer source: once they are done
they are done, so it knows I can get rid of them 

68
00:05:19,200 --> 00:05:23,440
when they have ended and you
don't have any listeners or anything.

69
00:05:23,462 --> 00:05:28,297
But the gainNodes: it doesn't
know anything. So they are being kept.

70
00:05:28,290 --> 00:05:33,657
So I'm going to create two gainNodes. 

71
00:05:33,650 --> 00:05:39,908
Because there is only so much you can optimise.

72
00:05:40,434 --> 00:05:48,750
It won't be very elegant but it should be
more efficient. We don't want this thing to blow up!

73
00:05:52,445 --> 00:05:57,245
I could do a loop for two times. [Laughter]

74
00:05:57,240 --> 00:06:01,737
Interesting...This is totally overblown.

75
00:06:02,091 --> 00:06:07,771
I'm trying to think of a variable that I'm not
using anywhere else, but I'm just going to use this. 

76
00:06:10,660 --> 00:06:16,354
This is the most stupid loop ever...

77
00:06:22,137 --> 00:06:26,914
Just for creating two gain nodes this
is overblown but that's where I want to be. 

78
00:06:26,914 --> 00:06:29,302
Hard coding, variable names.

79
00:06:29,634 --> 00:06:34,594
So we did this thing but it is not a good idea.

80
00:06:34,620 --> 00:06:40,674
So instead of doing it this way we
could tell it which gain to connect to.

81
00:06:40,685 --> 00:06:46,525
Just as we said the buffer, we
could also say the gain index... Array. 

82
00:06:46,520 --> 00:06:51,805
So it will try to connect to node 1 or node 2. 

83
00:06:51,800 --> 00:06:55,062
And then the value of this thing...  

84
00:06:55,060 --> 00:07:01,725
Inaud

85
00:07:02,731 --> 00:07:05,291
It's getting complex. 

86
00:07:05,290 --> 00:07:11,908
When you start routing things this way,
it's kind of like writing your own synthesizer 

87
00:07:11,920 --> 00:07:14,857
and introducing all the logic but it gets confusing.

88
00:07:16,262 --> 00:07:23,417
If you open a synthesizer
you would find it very complex.

89
00:07:23,440 --> 00:07:28,377
The routing is complex because it's a whole
instrument and you're defining the whole logic.

90
00:07:28,370 --> 00:07:31,257
So its bound to be confusing in some way.

91
00:07:31,280 --> 00:07:39,600
I'm not going to assume that you
can't pass the gain index because this is required. 

92
00:07:39,610 --> 00:07:45,325
The gainValue I can make optional, but
you definitely need to specify the gainIndex. 

93
00:07:45,337 --> 00:07:46,880
The gain is going to be the gainNodes of gainIndex. And also I need to connect the node. This is so terrible. Its ac.createGain(). No there is another solution otherwise they're not going to play.
DN: And the limiter connects to?
SP: Yes, it needs to be connected to the limiter.
OK the gains are connected so we have these two base here waiting for us to connect things to them. And then decide which node to connect this, depending on which voice. The gain, we change the value again, this is just normal. We connect the node to the gain. This doesn't have to be here. And the rest should be ok.
And we need to change this. Where we decide which thing to play.
So its zero because this is the first voice. Lets suppose its zero because we don't set the value, and then the second one should be one, which is an index of zero. So in theory they should still be playing.
DN: So let's see if we've patched that memory leak.
[they listen]
Wow it's doing a little dance.
SP: Now we don't have this massive gain collection.

Yeah it's funny, because depending on when you created the node...
It looks like a visual for this thingy.
So that's good. Now we need to change the volume. But we could maybe commit this thingy.

Commit: "with two gains for different track volumes'

The gain value should have been here anyway. So if the currentStep is zero, we want this one to be louder, otherwise it has to be 0.5 so I'm going to actually do it the other way. That's half of the volume. Everyone should use the same gain volume. But it doesn't.
So if we change it here, it's going to be one and then the other one is going to be really quiet so we need to change both.
We could start with 0.5 for everyone. I may want to have zero value one and zero value two. Gain value is always 0.5.
DN: Yes sure.
SP: And then gain value 1 might be 1. No 2.
DN: And this one want s to be 1 as well.
SP: Yes.
If currentStep === 0 I want it to be 1... This might sound horrible.
[they listen]
DN: I'm not hearing any difference.
SP: I'm going to console.log it.
[they listen]
Am I building this at all? Ah it shows from time to time.
DN: I wonder if it's just stuck.
SP: I m going to...
DN: That's definitely quieter.
SP: I've got to make it even quieter.

[it gets quieter]


1
00:00:00,000 --> 00:00:02,620
Chapter 8: Adding a build system.

2
00:00:02,700 --> 00:00:06,480
So... I think we should go back to the challenge.

3
00:00:06,480 --> 00:00:13,160
Well we have this, but not the interface.

4
00:00:13,190 --> 00:00:16,470
We don't have play and stop and
there's no way to modify the tempo,

5
00:00:16,500 --> 00:00:19,660
unless we change [the code],
and that's not very dynamic!

6
00:00:19,690 --> 00:00:21,100
DN: Right, change the code.

7
00:00:21,110 --> 00:00:24,550
SP: Yes, and reload. No! That's not very funny.

8
00:00:24,550 --> 00:00:30,450
So... I am lazy so I'm going to use a
component that renders all those buttons for you.

9
00:00:30,460 --> 00:00:34,440
Because I just don't want to do this over and over.

10
00:00:34,440 --> 00:00:41,870
I suppose it's good to be lazy as a programmer,
if you work to make sure you don't have to work again.

11
00:00:41,870 --> 00:00:44,940
So I made a component and used it with npm.

12
00:00:44,940 --> 00:00:48,680
I need to initialize this thing as an npm project, first.

13
00:00:48,680 --> 00:00:51,350
So I'm going to npm init this thingy.

14
00:00:51,380 --> 00:00:53,100
Because that way I'll have a package JSON.

15
00:00:53,120 --> 00:00:57,090
Otherwise it stores the thing
in `node_packages` folder,

16
00:00:57,110 --> 00:01:00,120
but it doesn't save the
dependencies to packages.json.

17
00:01:00,130 --> 00:01:03,630
If I give you this repository and
I don't check in the node modules,

18
00:01:03,650 --> 00:01:06,800
you're going to have a hard time figuring out what dependencies I'm using.

19
00:01:06,800 --> 00:01:09,240
So this is important.

20
00:01:09,240 --> 00:01:13,120
So I will just... OK fine, then clapping.

21
00:01:17,580 --> 00:01:22,430
No text no repo, clap.

22
00:01:22,460 --> 00:01:25,440
[Silence]

23
00:01:28,490 --> 00:01:32,110
You have to do it that way or it doesn't like it.

24
00:01:32,110 --> 00:01:34,470
Yes, it's perfect.

25
00:01:34,510 --> 00:01:41,420
In theory I should just press return, but I
like writing yes, it gives me confidence. [Laughter]

26
00:01:41,440 --> 00:01:44,530
I'm not going to mess with
something I shouldn't be messing with.

27
00:01:44,530 --> 00:01:47,870
So now I should be able to npm install things.

28
00:01:47,870 --> 00:01:51,740
They are going to be saved
as dependencies in packages.json.

29
00:01:51,740 --> 00:01:58,500
Otherwise if you say `npm install --save`,
it doesn't really save if there's no package.json.

30
00:01:58,500 --> 00:02:03,290
And I'm not going to create this
thing from scratch because I can't remember.

31
00:02:03,290 --> 00:02:06,350
[Silence]

32
00:02:07,290 --> 00:02:09,990
I think it's 'transport' - I hope it is.

33
00:02:10,000 --> 00:02:19,330
I don't know why they call it 'transport',
but in musical software it's always called that.

34
00:02:19,360 --> 00:02:23,770
It's the buttons with play and stop, the bpm thingy.

35
00:02:23,780 --> 00:02:27,720
I didn't want to be too
original so I just called it transport.

36
00:02:27,740 --> 00:02:31,730
DN: Yes, OK. I haven't heard
that before but it makes sense.

37
00:02:31,760 --> 00:02:37,050
SP: If you look up transport you will
find a lot of references to all the inaud,

38
00:02:37,090 --> 00:02:39,610
especially MIDI creation software inaud transport.

39
00:02:39,650 --> 00:02:46,390
I think it's so you can transport
yourself around the song. I'm not sure.

40
00:02:46,490 --> 00:02:52,370
So this comes from this organization
that has more modules and things.

41
00:02:52,370 --> 00:02:56,510
This is the one I'm using.

42
00:02:56,510 --> 00:02:59,070
This is what it should look like, if you use example.

43
00:02:59,090 --> 00:03:02,050
But the one that we are going to
use doesn't really have any theming;

44
00:03:02,050 --> 00:03:05,870
we can add whatever we want.

45
00:03:06,340 --> 00:03:11,910
SP: This uses web components
to render, this is a web component.

46
00:03:12,340 --> 00:03:15,470
Because web components are not really clear yet.

47
00:03:15,480 --> 00:03:23,420
You need to install the component along with a
web component polyfill to make sure this can work.

48
00:03:23,420 --> 00:03:26,350
DN: Right.

49
00:03:26,380 --> 00:03:31,520
Maybe I should also document
this thing, because it's not obvious.

50
00:03:31,550 --> 00:03:35,570
There is a nice polyfill that you
can install, which is called webcomponents-lite,

51
00:03:35,610 --> 00:03:41,200
and it installs the minimum that
I need for this, which is: registerElement.

52
00:03:41,230 --> 00:03:44,350
and I think a couple more things, but I
just need to be able to do registerElement,

53
00:03:44,380 --> 00:03:46,940
because that's not enabled in Firefox yet.

54
00:03:46,940 --> 00:03:46,950
It's available in Chrome, so if you
try things only in Chrome you don't notice.
because that's not enabled in Firefox yet.

55
00:03:46,950 --> 00:03:51,930
It's available in Chrome, so if you
try things only in Chrome you don't notice.

56
00:03:51,970 --> 00:03:57,370
But if you try in Firefox without the
DOM things enabled, you'll find errors.

57
00:03:57,370 --> 00:04:00,490
So this is going to polyfill the thing.

58
00:04:00,490 --> 00:04:10,620
So I've got all these things and to load them I need
to use require, and this is not standard JavaScript.

59
00:04:10,620 --> 00:04:16,770
I could try to load these things from node modules,
but it doesn't really work with this component,

60
00:04:16,790 --> 00:04:19,250
because it uses other modules you should require.

61
00:04:19,290 --> 00:04:22,730
So what I should use is webpack or browserify,

62
00:04:22,740 --> 00:04:28,410
or something that takes my main.js
that I've been using so far, and converts that

63
00:04:28,470 --> 00:04:33,810
into something that takes all the requirements
and things and makes that just one bundle.

64
00:04:33,830 --> 00:04:34,640
DN: Right.

65
00:04:34,640 --> 00:04:37,090
SP: So this is when things get interesting.

66
00:04:37,090 --> 00:04:42,530
I just used webpack last week and
that was the first time I've installed it.

67
00:04:42,540 --> 00:04:48,530
It's pretty easy to use. I'm going to reuse it again.

68
00:04:50,470 --> 00:04:56,380
It's kind of like browserify, but it's got watch
and things like that which are very convenient.

69
00:04:56,410 --> 00:05:02,790
With browserify you need to install watchify
or something but webpack does everything for you.

70
00:05:02,830 --> 00:05:10,290
They call it 'Batteries included'. I like to
play with different things and assess them.

71
00:05:10,290 --> 00:05:14,960
People say that webpack also
generates smaller packages,

72
00:05:14,990 --> 00:05:22,250
but I haven't really used it in a project enough
to compare. I like to experiment with things.

73
00:05:23,440 --> 00:05:28,240
And because this is the first time
I've used webpack, I don't remember the syntax.

74
00:05:28,280 --> 00:05:31,170
So I'm going to go to look at 'getting started'. 

75
00:05:31,200 --> 00:05:35,710
So you install it (this is not good
practice, they say you should install...)

76
00:05:35,730 --> 00:05:37,950
So they recommend installing webpack minus g. 

77
00:05:37,960 --> 00:05:43,540
That's not a good idea, because I don't want everyone
who uses my computer to be able to use webpack.

78
00:05:44,100 --> 00:05:46,420
So I'm going to do it a different way.

79
00:05:46,420 --> 00:05:50,410
So they suggest that you use
webpack and then the entry.js, 

80
00:05:50,420 --> 00:05:55,300
which in my case is main.js,
and then it generates bundle.js

81
00:05:55,330 --> 00:05:59,720
So what I'm going to do is
to call that from npm script. 

82
00:05:59,770 --> 00:06:04,580
Then it will call it from the
binary inside `node_modules`,

83
00:06:04,610 --> 00:06:11,680
but it doesn't need to be installed
globally. So I will just run it from the package.

84
00:06:11,780 --> 00:06:14,500
So here's package.json.

85
00:06:14,500 --> 00:06:21,900
And then I can add a new script which
is called build, and this one will use webpack.

86
00:06:21,900 --> 00:06:29,080
So we will tell it to take main.js
and output that to bundle.js for now.

87
00:06:29,110 --> 00:06:35,050
And you run this with `npm run build`. 

88
00:06:35,090 --> 00:06:49,010
It adds this bin to the current
environment for that moment. 

89
00:06:49,030 --> 00:06:52,490
And then you don't need to have
it globally because this is in the path.

90
00:06:56,360 --> 00:06:58,360

So you don't need to install it globally and then it's way cleaner. Because otherwise if I tell you to go and run webpack, you need to know that you need to install webpack. That's ok with webpack, but some other packages have a different name from the package. The binary they install is different. I think it was for example, Grunt? For Grunt you need to install grunt-cli. But how do I know that I need to install grunt-cli?
DN: Right, there's a lot of assumed knowledge there.
SP: So if you just keep it like that and your project uses webpack: I don't care! Because your project just deals with whatever the name of the executable is when we use our package.json script.
So hopefully if this works... Yes it does build the thing.


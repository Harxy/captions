1
00:00:00,000 --> 00:00:02,890
Chapter 5: Playing part 1 sequence on a loop.

2
00:00:03,060 --> 00:00:05,500
SP: Right now there is no way to loop.

3
00:00:05,500 --> 00:00:07,730
DN: Right.

4
00:00:07,730 --> 00:00:10,870
 We just play 1 player.  

5
00:00:10,870 --> 00:00:13,690
And there is also no way to adjust the tempo.

6
00:00:13,690 --> 00:00:19,270
And also there is no way to stop it. Once it starts
playing I can't stop it and I can't continue. 

7
00:00:19,300 --> 00:00:24,590
So we need to change this and
do a different way of scheduling.

8
00:00:25,080 --> 00:00:32,920
We need to do a proper way of scheduling,
because I could go on following your challenge,

9
00:00:32,940 --> 00:00:43,160
With this sequence I have in my array, I could build
something which generates this narrow variation.

10
00:00:43,190 --> 00:00:47,233
And also load another sample so the other
player is playing the same thing at the same time.

11
00:00:47,260 --> 00:00:52,830
But the issue with that (and same thing here), is that
I'm scheduling the whole thing from the beginning. 

12
00:00:52,880 --> 00:00:55,900
Then once it's playing there's no way to stop it. 

13
00:00:55,910 --> 00:01:00,260
And then I won't be doing the things that
you ask me for which is playing it, stopping it,

14
00:01:00,310 --> 00:01:05,270
and changing the tempo etc.
Right now this will be pretty boring. 

15
00:01:05,270 --> 00:01:10,110
One of the best things with web
audio is that you can interact with it.

16
00:01:10,110 --> 00:01:17,700
It's very playful, and generates things dynamically.
And what we're doing is not very dynamic. 

17
00:01:17,720 --> 00:01:24,810
As I said, web audio is running a
different clock so you could try and do a timeout. 

18
00:01:24,820 --> 00:01:30,380
But that's not a good idea because timeouts are
very erratic and they depend on a lot of things.

19
00:01:30,380 --> 00:01:30,560
It is recommended to have a timeout that
periodically checks if it needs to schedule things. 
But that's not a good idea because timeouts are
very erratic and they depend on a lot of things.

20
00:01:30,560 --> 00:01:41,710
It is recommended to have a timeout that
periodically checks if it needs to schedule things. 

21
00:01:41,730 --> 00:01:49,830
So a way to explain that would be... We
are going to keep track of which step we are in.

22
00:01:49,860 --> 00:01:56,960
And we know how long each step takes, so timeout is
going to be checking if it needs to schedule things.

23
00:01:56,960 --> 00:01:57,160
 so it's not a timer, it's a timeout.

SP: So we are going to keep track of which position we are in the steps in the sequence.
So every time the timeout is going to run its going to say "Which step are we in?" and see if it needs to trigger things or schedule things to be triggered.
And then, the reason it's a timeout and not just a timer is because a timer is going to be trying to call all the time all the time as fast as possible.
But with timeout, if for example you drift a little bit, the next time you called you will try to make up for the little bit you missed.

DN: If I understand correctly, the way we've done it so far it's like we define, well so far one bar of music, and we've defined it all up front. And then we just set it running and it plays and we can't stop it.
But with this it's almost like we're saying...
SP: We're going to be reading the score.
And we know how long each step takes, so timeout is
going to be checking if it needs to schedule things.

24
00:01:57,160 --> 00:01:57,180
 so it's not a timer, it's a timeout.

SP: So we are going to keep track of which position we are in the steps in the sequence.
So every time the timeout is going to run its going to say "Which step are we in?" and see if it needs to trigger things or schedule things to be triggered.
And then, the reason it's a timeout and not just a timer is because a timer is going to be trying to call all the time all the time as fast as possible.
But with timeout, if for example you drift a little bit, the next time you called you will try to make up for the little bit you missed.

DN: If I understand correctly, the way we've done it so far it's like we define, well so far one bar of music, and we've defined it all up front. And then we just set it running and it plays and we can't stop it.
But with this it's almost like we're saying...
SP: We're going to be reading the score.

25
00:01:57,180 --> 00:01:58,960
Every time we've finished with
a function we give it a new timeout.
 so it's not a timer, it's a timeout.

SP: So we are going to keep track of which position we are in the steps in the sequence.
So every time the timeout is going to run its going to say "Which step are we in?" and see if it needs to trigger things or schedule things to be triggered.
And then, the reason it's a timeout and not just a timer is because a timer is going to be trying to call all the time all the time as fast as possible.
But with timeout, if for example you drift a little bit, the next time you called you will try to make up for the little bit you missed.

DN: If I understand correctly, the way we've done it so far it's like we define, well so far one bar of music, and we've defined it all up front. And then we just set it running and it plays and we can't stop it.
But with this it's almost like we're saying...
SP: We're going to be reading the score.

26
00:01:58,960 --> 00:02:02,220
Every time we've finished with
a function we give it a new timeout.


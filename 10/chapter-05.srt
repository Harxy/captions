1
00:00:00,000 --> 00:00:02,890
Chapter 5: Playing part 1 sequence on a loop.

2
00:00:03,060 --> 00:00:05,500
SP: Right now there is no way to loop.

3
00:00:05,500 --> 00:00:07,730
DN: Right.

4
00:00:07,730 --> 00:00:10,870
We just play 1 player.

5
00:00:10,870 --> 00:00:13,690
And there is also no way to adjust the tempo.

6
00:00:13,690 --> 00:00:19,270
And also there is no way to stop it. Once it starts
playing I can't stop it and I can't continue.

7
00:00:19,300 --> 00:00:24,590
So we need to change this and
do a different way of scheduling.

8
00:00:25,080 --> 00:00:32,920
We need to do a proper way of scheduling,
because I could go on following your challenge,

9
00:00:32,940 --> 00:00:43,160
With this sequence I have in my array, I could build
something which generates this narrow variation.

10
00:00:43,190 --> 00:00:47,233
And also load another sample so the other
player is playing the same thing at the same time.

11
00:00:47,260 --> 00:00:52,830
But the issue with that (and same thing here), is that
I'm scheduling the whole thing from the beginning.

12
00:00:52,880 --> 00:00:55,900
Then once it's playing there's no way to stop it.

13
00:00:55,910 --> 00:01:00,260
And then I won't be doing the things that
you ask me for which is playing it, stopping it,

14
00:01:00,310 --> 00:01:05,270
and changing the tempo etc.
Right now this will be pretty boring.

15
00:01:05,270 --> 00:01:10,110
One of the best things with web
audio is that you can interact with it.

16
00:01:10,110 --> 00:01:17,700
It's very playful, and generates things dynamically.
And what we're doing is not very dynamic.

17
00:01:17,720 --> 00:01:24,810
As I said, web audio is running a
different clock so you could try and do a timeout.

18
00:01:24,820 --> 00:01:30,380
But that's not a good idea because timeouts are
very erratic and they depend on a lot of things.

19
00:01:30,380 --> 00:01:30,560
It is recommended to have a timeout that
periodically checks if it needs to schedule things.
But that's not a good idea because timeouts are
very erratic and they depend on a lot of things.

20
00:01:30,560 --> 00:01:41,710
It is recommended to have a timeout that
periodically checks if it needs to schedule things.

21
00:01:41,730 --> 00:01:49,830
So a way to explain that would be... We
are going to keep track of which step we are in.

22
00:01:49,860 --> 00:01:57,160
And we know how long each step takes, so timeout is
going to be checking if it needs to schedule things.

23
00:01:57,180 --> 00:02:02,220
Every time we've finished with
a function we give it a new timeout.

24
00:02:02,220 --> 00:02:04,100
So it's not a timer, it's a timeout.

25
00:02:04,140 --> 00:02:09,050
So we are going to keep track of which
position we are in in the steps in the sequence.

26
00:02:09,110 --> 00:02:14,300
So every time the timeout is going to
run it's going to say "Which step are we in?",

27
00:02:14,310 --> 00:02:20,330
and see if it needs to trigger
things or schedule things to be triggered.

28
00:02:20,370 --> 00:02:22,970
The reason it's a timeout
and not just a timer is because

29
00:02:22,980 --> 00:02:26,910
a timer is going to be trying to
call all the time as fast as possible.

30
00:02:26,920 --> 00:02:31,530
But with timeout, if for
example you drift a little bit,

31
00:02:31,550 --> 00:02:39,330
the next time you called you will try
to make up for whatever you missed.

32
00:02:39,360 --> 00:02:45,590
DN: If I understand correctly, the way
we've done it so far is to define one bar of music,

33
00:02:45,600 --> 00:02:49,810
and we've defined it all up front. And then we just
set it running and it plays and we can't stop it.

34
00:02:49,840 --> 00:02:51,700
But with this it's almost like we're saying...

35
00:02:51,710 --> 00:02:53,240
SP: We're going to be reading the score.

36
00:02:53,240 --> 00:02:56,120
DN: We're going to be reading
the score like a musician does.

37
00:02:56,150 --> 00:02:58,390
And at each point in time
we're scheduling the next beat.

38
00:02:58,410 --> 00:03:03,250
SP: Exactly. And like a conductor saying
"slow down" because we changed the tempo,

39
00:03:03,280 --> 00:03:06,350
we're still reading the score but take longer.

40
00:03:06,380 --> 00:03:11,880
SP: And if someone says pause, just pause for
a moment, instead of "Oh, I can't pause now".

41
00:03:11,880 --> 00:03:13,760
DN: OK.

42
00:03:13,800 --> 00:03:19,550
SP: So I will just describe a step or
something and stop at 0. Which is where I am.

43
00:03:19,630 --> 00:03:22,100
So I want to introduce a couple of functions,

44
00:03:22,110 --> 00:03:29,220
one for starting and one for stopping,
and another for trying the timeout.

45
00:03:29,240 --> 00:03:32,790
SP: We won't call this playSequence,
but I'll delete that thing later.

46
00:03:32,800 --> 00:03:42,120
And I can delete this thing also.
I like to have some spaces here as well.

47
00:03:42,170 --> 00:03:47,420
And for some reason I
have these little curly things.

48
00:03:47,450 --> 00:03:52,730
SP: So I've got start and I've got stop.

49
00:03:52,750 --> 00:03:59,100
I like to write this skeleton so
I know I need to fill things later.

50
00:03:59,120 --> 00:04:05,000
It's what I always do. And at
the end of this I will call this again.

51
00:04:05,030 --> 00:04:08,260
DN: I see.

52
00:04:08,260 --> 00:04:16,940
SP: I will use this so I can
cancel this on stop... Is it clearTimeout?

53
00:04:16,970 --> 00:04:22,060
Because obviously cancel was
not a good name. [Laughter]

54
00:04:22,060 --> 00:04:25,440
So I build this thing.

55
00:04:26,350 --> 00:04:29,620
So that's more or less what we want to do.

56
00:04:29,650 --> 00:04:31,610
That's why I think it's a
good idea to have the skeleton;

57
00:04:31,670 --> 00:04:36,420
so you can say I want to
start and stop. And that's the crux.

58
00:04:36,450 --> 00:04:38,670
Obviously we want to have more things in schedule().

59
00:04:38,690 --> 00:04:43,830
SP: Not just like start or stop timeout.
I also need to create the timeout as well.

60
00:04:43,830 --> 00:04:46,990
[Silence]

61
00:04:49,100 --> 00:04:55,720
It's nothing right now. It's good
to be clear about your intentions.

62
00:04:55,740 --> 00:05:05,170
So when I start this thing I'll
save the time at which this started?

63
00:05:05,200 --> 00:05:09,120
Let me think.

64
00:05:09,140 --> 00:05:13,480
That way I know when I pause
the thing, I can calculate the steps.

65
00:05:13,510 --> 00:05:17,130
This is a bit weird, and it
takes a long time to understand,

66
00:05:17,140 --> 00:05:19,920
but you will understand why I schedule this thing.

67
00:05:19,940 --> 00:05:20,530
DN: OK.

68
00:05:20,530 --> 00:05:28,210
SP: So you have the sequence, but you
can't pause or play,  or change the tempo, 

69
00:05:28,490 --> 00:05:32,060
You're just scheduling everything in
advance and that's not the way it should be.

70
00:05:32,090 --> 00:05:37,190
And it's not really playful. So
what we should use is 2 clocks. 

71
00:05:37,200 --> 00:05:42,690
There's this brilliant tutorial called 'A tale of
the two clocks'. And if you look will find that.

72
00:05:42,720 --> 00:05:46,910
So essentially what were going to have is
this timeout function; this scheduling function. 

73
00:05:46,950 --> 00:05:52,640
It's going to be like the player looking at
the score saying "What do I need to do now"?

74
00:05:52,660 --> 00:05:59,610
It's fast enough but not exactly
like what a player would do. Inaud.

75
00:05:59,640 --> 00:06:09,030
So the way we do this thing is with this
timeout that I'm going to be setting all the time.

76
00:06:09,060 --> 00:06:12,700
It's kind of complex to build
this thing from the ground up,

77
00:06:12,730 --> 00:06:15,410
and I always forget something,
so I've prepared a skeleton. 

78
00:06:15,440 --> 00:06:18,070
It's a simplified version of the tutorial.

79
00:06:18,110 --> 00:06:24,060
Because the tutorial also deals with having
swings, so you can smooth out the tempo at every step. 

80
00:06:24,090 --> 00:06:27,920
But I think that's too complex for this,
and also "Clapping Music" doesn't have swing changes!

81
00:06:27,920 --> 00:06:28,630
DN: No.

82
00:06:28,630 --> 00:06:33,400
SP: So I feel it's best to have
a simplified version here.

83
00:06:33,450 --> 00:06:41,600
So this skeleton has a start function,
a stop function so we can clear the timeout,

84
00:06:41,600 --> 00:06:48,080
and a schedule function, which
determines how long each beat is.

85
00:06:48,080 --> 00:06:53,170
Like 60 seconds slash the bpm,
gives us the number of seconds per beat.

86
00:06:53,190 --> 00:07:01,740
And we want each step to be a quarter of a note.
Like a black note, so that's the length of the step.

87
00:07:01,760 --> 00:07:08,430
And we want the schedule
function running every time we can.

88
00:07:08,450 --> 00:07:17,280
Every time it runs it will look at the
current time in context, minus the start time.

89
00:07:17,320 --> 00:07:19,920
Which is what we said when we started.

90
00:07:19,920 --> 00:07:25,900
So if you have the sequence it can
try to make things relative to the steps.

91
00:07:25,920 --> 00:07:29,490
And not to whatever time the whole thing started.

92
00:07:29,510 --> 00:07:30,930
DN: Yes, right.

93
00:07:30,930 --> 00:07:40,150
SP: So the step time starts at zero, so if you start at
zero and this thing is related to the serial thingy,

94
00:07:40,170 --> 00:07:46,190
it's easy to say "Am I still in this step,
or do I need to jump to the next one"?

95
00:07:46,210 --> 00:07:50,400
Or, "Should I just stop
because it's not time to play it yet?" 

96
00:07:50,440 --> 00:07:53,810
So that's what we are doing here.

97
00:07:53,840 --> 00:07:59,200
So with the step time and the start
time, you can say if something has to happen,

98
00:07:59,230 --> 00:08:02,350
it has to happen at step time, using the sequence. 

99
00:08:02,350 --> 00:08:04,350
But when you scale something you scale in the context playtime, which is the web audio clock. So you have this sequence which is totally atemporal, so to speak, so we are going to be looping over the sequence all the time.
But when you schedule things you do it with the context because we will be playing and stopping things several times during the lifetime of the website, so that the clock of the context keeps growing, but the sequences are still zero one.  Supposing its one step, one second, zero one two three four. At some point the context might be like – thousands of seconds, so that's why you need to remove or...
how do you say, when you add something you sum it, but when you remove something you...?
DN: Get the difference? Or subtract?
SP: You subtract! That's the word.
So that's why you want to subtract this start time, so it becomes relative again.
So just go to the next step and if it's more than the number of steps we are looping so you go back to zero again. And then you have step length and you want to scale it again.
DN: And it calls itself.
it has to happen at step time, using the sequence. 

100
00:08:04,350 --> 00:08:04,650
it has to happen at step time, using the sequence. 

